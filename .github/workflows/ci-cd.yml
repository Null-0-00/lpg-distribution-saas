name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: TypeScript type check
        run: npm run type-check

      - name: Security audit
        run: npm audit --audit-level=high

      # CodeQL analysis disabled until code scanning is enabled in repository settings
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: javascript

      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v3

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-checks

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lpg_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lpg_test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/lpg_test
        run: |
          npx prisma db push --force-reset
          npx prisma db seed

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lpg_test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/lpg_test
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: npm run test

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lpg_test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/lpg_test
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: npm run test:integration

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  # End-to-End Tests
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lpg_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Setup E2E database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lpg_e2e
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/lpg_e2e
        run: |
          npx prisma db push --force-reset
          npx prisma db seed

      - name: Build application
        env:
          NODE_ENV: production
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: npm run build

      - name: Start application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lpg_e2e
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/lpg_e2e
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: |
          npm start &
          sleep 10

      - name: Run Playwright tests
        run: npx playwright test

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality-checks, test, e2e-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/lpg-distributor-saas
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging (Disabled - Kubernetes cluster not configured)
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/develop'
  #   environment: staging

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: 'v1.28.0'

  #     - name: Configure kubectl
  #       run: |
  #         mkdir -p ~/.kube
  #         if [ -z "${{ secrets.KUBE_CONFIG_STAGING }}" ]; then
  #           echo "Error: KUBE_CONFIG_STAGING secret is not set"
  #           exit 1
  #         fi
  #         echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
  #         chmod 600 ~/.kube/config

  #     - name: Deploy to staging
  #       run: |
  #         envsubst < k8s/staging/deployment.yaml | kubectl apply -f -
  #         kubectl rollout status deployment/lpg-distributor-staging -n staging

  #     - name: Run database migrations
  #       run: |
  #         kubectl exec deployment/lpg-distributor-staging -n staging -- npm run db:migrate:deploy

  #     - name: Run health check
  #       run: |
  #         kubectl wait --for=condition=ready pod -l app=lpg-distributor-staging -n staging --timeout=300s
  #         curl -f https://staging.lpg-distributor.com/api/health

  # Deploy to Production (Disabled - Kubernetes cluster not configured)
  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
  #   environment: production

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: 'v1.28.0'

  #     - name: Configure kubectl
  #       run: |
  #         mkdir -p ~/.kube
  #         if [ -z "${{ secrets.KUBE_CONFIG_PRODUCTION }}" ]; then
  #           echo "Error: KUBE_CONFIG_PRODUCTION secret is not set"
  #           exit 1
  #         fi
  #         echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
  #         chmod 600 ~/.kube/config

  #     - name: Create database backup
  #       run: |
  #         kubectl create job --from=cronjob/database-backup backup-pre-deploy-$(date +%s) -n production

  #     - name: Deploy to production
  #       run: |
  #         envsubst < k8s/production/deployment.yaml | kubectl apply -f -
  #         kubectl rollout status deployment/lpg-distributor-production -n production

  #     - name: Run database migrations
  #       run: |
  #         kubectl exec deployment/lpg-distributor-production -n production -- npm run db:migrate:deploy

  #     - name: Run health check
  #       run: |
  #         kubectl wait --for=condition=ready pod -l app=lpg-distributor-production -n production --timeout=300s
  #         curl -f https://lpg-distributor.com/api/health

  #     - name: Notify Slack
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: ${{ job.status }}
  #         channel: '#deployments'
  #         webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Security Scan
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/null-0-00/lpg-distributor-saas:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Testing (Disabled - depends on staging deployment)
  # performance-test:
  #   name: Performance Testing
  #   runs-on: ubuntu-latest
  #   needs: deploy-staging
  #   if: github.ref == 'refs/heads/develop'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install k6
  #       run: |
  #         sudo gpg -k
  #         sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
  #         echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
  #         sudo apt-get update
  #         sudo apt-get install k6

  #     - name: Run performance tests
  #       run: k6 run scripts/performance-test.js

  #     - name: Upload performance results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: performance-results
  #         path: performance-results.json
