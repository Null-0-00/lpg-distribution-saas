generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =============================================
// CORE MODELS (Keep existing - minimal changes)
// =============================================

model Tenant {
  id                 String             @id @default(cuid())
  name               String
  subdomain          String             @unique
  subscriptionStatus SubscriptionStatus
  subscriptionPlan   SubscriptionPlan
  isActive           Boolean            @default(true)
  settings           Json?
  currency           String             @default("USD")
  timezone           String             @default("UTC")
  language           String             @default("en")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  
  // Relations to new optimized models
  companies                   Company[]
  cylinderSizes               CylinderSize[]
  products                    Product[]
  drivers                     Driver[]
  users                       User[]
  transactionLogs             TransactionLog[]
  dailyInventorySnapshots     DailyInventorySnapshot[]
  currentInventorySummary     CurrentInventorySummary?
  currentProductInventory     CurrentProductInventory[]
  currentSizeInventory        CurrentSizeInventory[]

  @@map("tenants")
}

model User {
  id       String @id @default(cuid())
  tenantId String
  email    String @unique
  name     String
  password String
  role     String @default("USER")
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@map("users")
}

model Company {
  id         String  @id @default(cuid())
  tenantId   String
  name       String
  code       String?
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products        Product[]
  transactionLogs TransactionLog[]
  
  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([tenantId, isActive])
  @@map("companies")
}

model CylinderSize {
  id         String  @id @default(cuid())
  tenantId   String
  size       String  // "12kg", "45kg", etc.
  weight     Float?
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  tenant                  Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products                Product[]
  dailySizeBreakdowns     DailySizeBreakdown[]
  currentSizeInventory    CurrentSizeInventory[]
  
  @@unique([tenantId, size])
  @@index([tenantId])
  @@index([tenantId, isActive])
  @@map("cylinder_sizes")
}

model Product {
  id                  String  @id @default(cuid())
  tenantId            String
  companyId           String
  cylinderSizeId      String
  name                String
  size                String  // Legacy field, use cylinderSize relation
  currentPrice        Float   @default(0)
  costPrice           Float?
  lowStockThreshold   Int     @default(10)
  isActive            Boolean @default(true)  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  tenant                     Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  company                    Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  cylinderSize               CylinderSize              @relation(fields: [cylinderSizeId], references: [id], onDelete: Cascade)
  transactionLogs            TransactionLog[]
  dailyProductBreakdowns     DailyProductBreakdown[]
  currentProductInventory    CurrentProductInventory?
  
  @@unique([tenantId, companyId, name])
  @@index([tenantId])
  @@index([tenantId, isActive])
  @@index([companyId])
  @@map("products")
}

model Driver {
  id            String   @id @default(cuid())
  tenantId      String
  name          String
  phone         String?
  email         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  transactionLogs TransactionLog[]
  
  @@index([tenantId])
  @@index([tenantId, isActive])
  @@map("drivers")
}

// =============================================
// NEW OPTIMIZED MODELS (Replace 20+ old models)
// =============================================

model DailyInventorySnapshot {
  id                    String   @id @default(cuid())
  tenantId              String
  date                  DateTime @db.Date
  
  // Sales Data (aggregated from all drivers/transactions)
  packageSalesQty       Int      @default(0)
  packageSalesRevenue   Float    @default(0)
  refillSalesQty        Int      @default(0)
  refillSalesRevenue    Float    @default(0)
  totalSalesQty         Int      @default(0)
  totalSalesRevenue     Float    @default(0)
  
  // Purchase Data (aggregated)
  packagePurchaseQty    Int      @default(0)
  packagePurchaseCost   Float    @default(0)
  refillPurchaseQty     Int      @default(0)
  refillPurchaseCost    Float    @default(0)
  totalPurchaseQty      Int      @default(0)
  totalPurchaseCost     Float    @default(0)
  
  // Current Inventory (calculated using LPG business logic)
  fullCylinders         Int      @default(0)
  emptyCylinders        Int      @default(0)
  emptyCylindersInHand  Int      @default(0)
  totalCylinders        Int      @default(0)
  
  // Receivables (calculated)
  cylinderReceivables   Int      @default(0)
  cashReceivables       Float    @default(0)
  totalReceivables      Float    @default(0)
  
  // Outstanding Orders
  outstandingShipments  Int      @default(0)
  
  // Financial Summary
  grossProfit           Float    @default(0)
  netProfit             Float    @default(0)
  totalCosts            Float    @default(0)
  
  // System fields
  calculatedAt          DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  tenant                Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  productBreakdowns     DailyProductBreakdown[]
  sizeBreakdowns        DailySizeBreakdown[]
  
  @@unique([tenantId, date])
  @@index([tenantId, date])
  @@index([date])
  @@map("daily_inventory_snapshots")
}

model DailyProductBreakdown {
  id            String   @id @default(cuid())
  snapshotId    String
  productId     String
  
  // Sales by product
  packageSales  Int      @default(0)
  refillSales   Int      @default(0)
  totalSales    Int      @default(0)
  salesRevenue  Float    @default(0)
  
  // Purchases by product
  packagePurchase Int    @default(0)
  refillPurchase  Int    @default(0)
  totalPurchase   Int    @default(0)
  purchaseCost    Float  @default(0)
  
  // Current inventory by product
  fullCylinders   Int    @default(0)
  
  // Financial by product
  profit          Float  @default(0)
  
  createdAt       DateTime @default(now())
  
  snapshot        DailyInventorySnapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)
  product         Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([snapshotId, productId])
  @@index([snapshotId, productId])
  @@map("daily_product_breakdowns")
}

model DailySizeBreakdown {
  id                        String   @id @default(cuid())
  snapshotId                String
  cylinderSizeId            String
  
  // Inventory by size
  fullCylinders             Int      @default(0)
  emptyCylinders            Int      @default(0)
  emptyCylindersInHand      Int      @default(0)
  cylinderReceivables       Int      @default(0)
  
  // Outstanding orders by size
  outstandingShipments      Int      @default(0)
  outstandingPackageOrders  Int      @default(0)
  outstandingRefillOrders   Int      @default(0)
  
  // Buy/Sell tracking
  emptyCylindersBuySell     Int      @default(0)
  
  createdAt                 DateTime @default(now())
  
  snapshot                  DailyInventorySnapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)
  cylinderSize              CylinderSize           @relation(fields: [cylinderSizeId], references: [id], onDelete: Cascade)
  
  @@unique([snapshotId, cylinderSizeId])
  @@index([snapshotId, cylinderSizeId])
  @@map("daily_size_breakdowns")
}

model TransactionLog {
  id                String          @id @default(cuid())
  tenantId          String
  transactionType   TransactionType
  
  // Core transaction data
  driverId          String?         // Only for sales
  productId         String
  companyId         String
  quantity          Int
  unitPrice         Float
  totalAmount       Float
  
  // Sales specific fields
  cashDeposit       Float?          @default(0)
  cylinderDeposit   Int?            @default(0)
  discount          Float?          @default(0)
  netAmount         Float?          // totalAmount - discount
  
  // Purchase specific fields
  invoiceNumber     String?
  supplierName      String?
  
  // System fields
  transactionDate   DateTime        @db.Date
  createdAt         DateTime        @default(now())
  createdBy         String?
  
  tenant            Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  driver            Driver?         @relation(fields: [driverId], references: [id], onDelete: SetNull)
  product           Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  company           Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, transactionDate])
  @@index([transactionType, transactionDate])
  @@index([driverId, transactionDate])
  @@index([productId, transactionDate])
  @@map("transaction_logs")
}

model CurrentInventorySummary {
  id                           String   @id @default(cuid())
  tenantId                     String   @unique
  
  // Overall totals (for dashboard cards)
  totalFullCylinders           Int      @default(0)
  totalEmptyCylinders          Int      @default(0)
  totalEmptyCylindersInHand    Int      @default(0)
  totalCylinderReceivables     Int      @default(0)
  totalCashReceivables         Float    @default(0)
  totalCylinders               Int      @default(0)
  
  // Stock alerts
  lowStockItems                Int      @default(0)
  criticalStockItems           Int      @default(0)
  outOfStockItems              Int      @default(0)
  
  // Last calculation info
  lastCalculated               DateTime @default(now())
  lastTransactionId            String?
  
  tenant                       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@map("current_inventory_summary")
}

model CurrentProductInventory {
  id                String    @id @default(cuid())
  tenantId          String
  productId         String    @unique
  
  // Current stock levels
  fullCylinders     Int       @default(0)
  stockValue        Float     @default(0)
  
  // Stock status
  stockStatus       StockStatus @default(GOOD)
  lastSaleDate      DateTime?   @db.Date
  lastPurchaseDate  DateTime?   @db.Date
  
  // Calculated fields
  avgDailySales     Float     @default(0) // Average sales per day (last 30 days)
  daysOfStock       Int       @default(0) // How many days current stock will last
  
  updatedAt         DateTime  @updatedAt
  
  tenant            Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, productId])
  @@index([tenantId, productId])
  @@index([stockStatus])
  @@index([daysOfStock])
  @@map("current_product_inventory")
}

model CurrentSizeInventory {
  id                    String   @id @default(cuid())
  tenantId              String
  cylinderSizeId        String
  
  // Aggregated inventory by size
  fullCylinders         Int      @default(0)
  emptyCylinders        Int      @default(0)
  emptyCylindersInHand  Int      @default(0)
  cylinderReceivables   Int      @default(0)
  
  // Primary company for this size (most active)
  primaryCompanyId      String?
  primaryCompanyName    String?
  
  updatedAt             DateTime @updatedAt
  
  tenant                Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cylinderSize          CylinderSize @relation(fields: [cylinderSizeId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, cylinderSizeId])
  @@index([tenantId, cylinderSizeId])
  @@map("current_size_inventory")
}

// =============================================
// ENUMS
// =============================================

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum SubscriptionPlan {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum TransactionType {
  SALE_PACKAGE
  SALE_REFILL
  PURCHASE_PACKAGE
  PURCHASE_REFILL
}

enum StockStatus {
  GOOD
  LOW
  CRITICAL
  OUT_OF_STOCK
}

// =============================================
// SUMMARY BENEFITS
// =============================================

/*
This optimized schema provides:

✅ REDUCED COMPLEXITY: 10 models instead of 35+
✅ PRE-CALCULATED DATA: No real-time calculations needed
✅ SINGLE SOURCE OF TRUTH: Consistent data across all views
✅ AUTOMATIC UPDATES: Database triggers handle all calculations
✅ FAST QUERIES: Simple SELECT statements for all frontend needs
✅ CLEAR RELATIONSHIPS: Easy to understand data flow

Frontend API calls become simple:
- GET /api/dashboard/summary → CurrentInventorySummary
- GET /api/inventory/full-cylinders → CurrentSizeInventory  
- GET /api/inventory/daily-tracking → DailyInventorySnapshot
- POST /api/sales/entry → TransactionLog (with automatic updates)

No more confusion about which table to use - each frontend component 
has a clear, dedicated data source with pre-calculated values.
*/