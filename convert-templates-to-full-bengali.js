// Convert all message templates to use full Bengali including Bengali numerals
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Function to convert English numbers to Bengali
function toBengaliNumber(num) {
  const bengaliNumerals = ['‡ß¶', '‡ßß', '‡ß®', '‡ß©', '‡ß™', '‡ß´', '‡ß¨', '‡ß≠', '‡ßÆ', '‡ßØ'];
  return num
    .toString()
    .replace(/\d/g, (digit) => bengaliNumerals[parseInt(digit)]);
}

async function convertTemplatesToFullBengali() {
  try {
    console.log('üîß Converting all message templates to full Bengali...\n');

    const sakibTenant = 'cmdvbgp820000ub28u1hkluf4';

    // 1. Update Payment Received Confirmation Template
    const paymentTemplate = `*{{companyName}}*
‚úÖ *‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º {{customerName}},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {{amount}} ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ {{paymentType}} ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶° ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ:
üí∞ ‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{updatedCashReceivables}} ‡¶ü‡¶æ‡¶ï‡¶æ
üõ¢Ô∏è ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{updatedCylinderReceivables}} ‡¶ü‡¶ø

‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ: {{receivedBy}}
‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {{date}}
‡¶∏‡¶Æ‡¶Ø‡¶º: {{time}}

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶§ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!

*{{companyName}} - ‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞*`;

    await prisma.messageTemplate.updateMany({
      where: {
        tenantId: sakibTenant,
        trigger: 'PAYMENT_RECEIVED',
      },
      data: {
        template: paymentTemplate,
        updatedAt: new Date(),
      },
    });
    console.log('‚úÖ Updated Payment Received template');

    // 2. Update Overdue Reminder Template
    const overdueTemplate = `‚ö†Ô∏è *‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶®*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º {{customerName}},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ {{amount}} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§
‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶: {{daysOverdue}} ‡¶¶‡¶ø‡¶®

‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{cashAmount}} ‡¶ü‡¶æ‡¶ï‡¶æ
‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{cylinderAmount}} ‡¶ü‡¶ø

‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶§ ‡¶§‡¶æ‡¶°‡¶º‡¶æ‡¶§‡¶æ‡¶°‡¶º‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó: {{contactNumber}}

*{{companyName}}*`;

    await prisma.messageTemplate.updateMany({
      where: {
        tenantId: sakibTenant,
        trigger: 'OVERDUE_REMINDER',
      },
      data: {
        template: overdueTemplate,
        updatedAt: new Date(),
      },
    });
    console.log('‚úÖ Updated Overdue Reminder template');

    // 3. Update Receivables Change Template
    const receivablesChangeTemplate = `üîî *‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º {{customerName}},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:

{{cashChangeDetails}}

{{cylinderChangeDetails}}

‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ:
üí∞ ‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{newCashAmount}} ‡¶ü‡¶æ‡¶ï‡¶æ
üõ¢Ô∏è ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{newCylinderAmount}} ‡¶ü‡¶ø

‡¶∏‡¶Æ‡¶Ø‡¶º: {{date}} {{time}}
‡¶ï‡¶æ‡¶∞‡¶£: {{changeReason}}

*{{companyName}}*`;

    await prisma.messageTemplate.updateMany({
      where: {
        tenantId: sakibTenant,
        trigger: 'RECEIVABLES_CHANGE',
      },
      data: {
        template: receivablesChangeTemplate,
        updatedAt: new Date(),
      },
    });
    console.log('‚úÖ Updated Receivables Change template');

    // 4. Update Cylinder Return Confirmation Template
    const cylinderReturnTemplate = `*{{companyName}}*
üõ¢Ô∏è *‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º {{customerName}},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {{quantity}} ‡¶ü‡¶ø {{size}} ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

‡¶´‡ßá‡¶∞‡¶§‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶° ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ:
üí∞ ‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{updatedCashReceivables}} ‡¶ü‡¶æ‡¶ï‡¶æ
üõ¢Ô∏è ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{updatedCylinderReceivables}} ‡¶ü‡¶ø

‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ: {{receivedBy}}
‡¶´‡ßá‡¶∞‡¶§ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {{date}}
‡¶∏‡¶Æ‡¶Ø‡¶º: {{time}}

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶§ ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!

*{{companyName}} - ‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞*`;

    await prisma.messageTemplate.updateMany({
      where: {
        tenantId: sakibTenant,
        trigger: 'CYLINDER_RETURN',
      },
      data: {
        template: cylinderReturnTemplate,
        updatedAt: new Date(),
      },
    });
    console.log('‚úÖ Updated Cylinder Return template');

    console.log('\nüéØ Template Updates Summary:');
    console.log('‚úÖ Removed ‡ß≥ symbol and replaced with "‡¶ü‡¶æ‡¶ï‡¶æ" in Bengali');
    console.log('‚úÖ Converted "LPG ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞" to "‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞"');
    console.log('‚úÖ All templates now use full Bengali text');
    console.log('‚úÖ Ready for Bengali numeral conversion in messaging service');

    // Verify all updates
    console.log('\nüìù Verifying updated templates...');
    const updatedTemplates = await prisma.messageTemplate.findMany({
      where: { tenantId: sakibTenant },
      select: {
        name: true,
        trigger: true,
        template: true,
      },
    });

    updatedTemplates.forEach((template, index) => {
      console.log(`\n${index + 1}. ${template.name} (${template.trigger})`);
      console.log('Updated template:');
      console.log(template.template);
      console.log('\n' + '-'.repeat(60));
    });
  } catch (error) {
    console.error('‚ùå Error updating templates:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

convertTemplatesToFullBengali();
