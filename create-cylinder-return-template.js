// Create cylinder return message template
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createCylinderReturnTemplate() {
  try {
    console.log('ЁЯФз Creating cylinder return message template...\n');

    const cylinderReturnTemplate = `*{{companyName}}*
ЁЯЫвя╕П *рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржлрзЗрж░ржд ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг*

ржкрзНрж░рж┐ржпрж╝ {{customerName}},

ржЖржкржирж╛рж░ {{quantity}} ржЯрж┐ {{size}} рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ рж╕ржлрж▓ржнрж╛ржмрзЗ ржлрзЗрж░ржд ржирзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред

ржлрзЗрж░рждрзЗрж░ ржкрж░ ржЖржкржбрзЗржЯрзЗржб ржмржХрзЗржпрж╝рж╛:
ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛: рз│{{updatedCashReceivables}}
ЁЯЫвя╕П рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: {{updatedCylinderReceivables}} ржЯрж┐

ржЧрзНрж░рж╣ржгржХрж╛рж░рзА: {{receivedBy}}
ржлрзЗрж░ржд рждрж╛рж░рж┐ржЦ: {{date}}
рж╕ржоржпрж╝: {{time}}

ржЖржкржирж╛рж░ рж╕ржоржпрж╝ржоржд рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржлрзЗрж░рждрзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!

*{{companyName}} - LPG ржбрж┐рж╕рзНржЯрзНрж░рж┐ржмрж┐ржЙржЯрж░*`;

    const templateVariables = {
      customerName: 'ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржирж╛ржо',
      quantity: 'рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ рж╕ржВржЦрзНржпрж╛',
      size: 'рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ рж╕рж╛ржЗржЬ',
      updatedCashReceivables: 'ржЖржкржбрзЗржЯрзЗржб ржиржЧржж ржмржХрзЗржпрж╝рж╛',
      updatedCylinderReceivables: 'ржЖржкржбрзЗржЯрзЗржб рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛',
      receivedBy: 'ржЧрзНрж░рж╣ржгржХрж╛рж░рзА',
      date: 'рждрж╛рж░рж┐ржЦ',
      time: 'рж╕ржоржпрж╝',
      companyName: 'ржХрзЛржорзНржкрж╛ржирж┐рж░ ржирж╛ржо',
    };

    // Create template for Sakib's tenant
    const sakibTenant = 'cmdvbgp820000ub28u1hkluf4';

    // Get the provider ID from existing template
    const existingTemplate = await prisma.messageTemplate.findFirst({
      where: { tenantId: sakibTenant },
      select: { providerId: true },
    });

    const newTemplate = await prisma.messageTemplate.create({
      data: {
        tenantId: sakibTenant,
        providerId: existingTemplate?.providerId || 'cmdvz6r240003ublgjlzzz3o1',
        name: 'Cylinder Return Confirmation',
        trigger: 'CYLINDER_RETURN',
        messageType: 'WHATSAPP',
        template: cylinderReturnTemplate,
        variables: templateVariables,
        isActive: true,
        isDefault: true,
      },
    });

    console.log(`тЬЕ Created cylinder return template: ${newTemplate.id}`);

    // Verify the creation
    const createdTemplate = await prisma.messageTemplate.findUnique({
      where: { id: newTemplate.id },
    });

    console.log('\nЁЯУЭ Created template:');
    console.log(createdTemplate.template);

    console.log('\nЁЯФз Template variables:');
    console.log(JSON.stringify(createdTemplate.variables, null, 2));
  } catch (error) {
    console.error('тЭМ Error creating template:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

createCylinderReturnTemplate();
