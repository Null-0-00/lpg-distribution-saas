// Fix customer messaging for the correct tenant
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixCustomerMessaging() {
  try {
    console.log('üîß Fixing customer messaging...\n');

    // Get the active tenant from recent receivables
    const recentReceivable = await prisma.customerReceivableRecord.findFirst({
      where: {
        updatedAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000),
        },
      },
      include: {
        customer: {
          select: {
            name: true,
            phone: true,
            tenantId: true,
          },
        },
      },
      orderBy: { updatedAt: 'desc' },
    });

    if (!recentReceivable) {
      console.log('‚ùå No recent receivables found');
      return;
    }

    const tenantId = recentReceivable.customer.tenantId;
    console.log(`üè¢ Working with tenant: ${tenantId}`);
    console.log(
      `üë§ Customer: ${recentReceivable.customer.name} (${recentReceivable.customer.phone})`
    );

    // Check messaging settings for this tenant
    let messagingSettings = await prisma.messagingSettings.findUnique({
      where: { tenantId },
    });

    if (!messagingSettings) {
      console.log('‚öôÔ∏è Creating messaging settings for this tenant...');
      messagingSettings = await prisma.messagingSettings.create({
        data: {
          tenantId,
          whatsappEnabled: true,
          smsEnabled: false,
          emailEnabled: false,
          receivablesNotificationsEnabled: true,
          paymentNotificationsEnabled: true,
          overdueRemindersEnabled: true,
        },
      });
      console.log('‚úÖ Messaging settings created');
    } else {
      console.log('‚úÖ Messaging settings exist');
    }

    // Check message provider for this tenant
    let provider = await prisma.messageProvider.findFirst({
      where: {
        tenantId,
        isActive: true,
      },
    });

    if (!provider) {
      console.log('üîß Creating Evolution API provider for this tenant...');

      // Use the existing provider config from the other tenant as template
      const existingProvider = await prisma.messageProvider.findFirst({
        where: { isActive: true, name: 'Evolution API' },
      });

      if (existingProvider) {
        provider = await prisma.messageProvider.create({
          data: {
            tenantId,
            name: 'Evolution API',
            type: 'WHATSAPP_BUSINESS',
            config: existingProvider.config,
            isActive: true,
            isDefault: true,
          },
        });
        console.log('‚úÖ Provider created for tenant');
      } else {
        console.log('‚ùå No existing provider to copy from');
        return;
      }
    } else {
      console.log('‚úÖ Message provider exists');
    }

    // Create default templates for this tenant
    const templates = [
      {
        name: 'Customer Receivables Change',
        trigger: 'RECEIVABLES_CHANGE',
        messageType: 'WHATSAPP',
        template: `üîî *‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º {{customerName}},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:

‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{oldAmount}}
‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{newAmount}}
‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: {{change}} ({{changeType}})

‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{cashAmount}}
‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{cylinderAmount}}

‡¶è‡¶≤‡¶æ‡¶ï‡¶æ: {{areaName}}
‡¶∏‡¶Æ‡¶Ø‡¶º: {{date}} {{time}}
‡¶ï‡¶æ‡¶∞‡¶£: {{changeReason}}

*{{companyName}}*`,
        variables: {
          customerName: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
          oldAmount: '‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
          newAmount: '‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
          change: '‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®',
          changeType: '‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø/‡¶π‡ßç‡¶∞‡¶æ‡¶∏',
          cashAmount: '‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
          cylinderAmount: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
          areaName: '‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ',
          date: '‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ',
          time: '‡¶∏‡¶Æ‡¶Ø‡¶º',
          changeReason: '‡¶ï‡¶æ‡¶∞‡¶£',
          companyName: '‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ',
        },
      },
    ];

    for (const template of templates) {
      await prisma.messageTemplate.upsert({
        where: {
          tenantId_trigger_messageType: {
            tenantId,
            trigger: template.trigger,
            messageType: template.messageType,
          },
        },
        update: {
          name: template.name,
          template: template.template,
          variables: template.variables,
          isActive: true,
        },
        create: {
          tenantId,
          providerId: provider.id,
          name: template.name,
          trigger: template.trigger,
          messageType: template.messageType,
          template: template.template,
          variables: template.variables,
          isActive: true,
          isDefault: true,
        },
      });
    }

    console.log('üìù Message templates created/updated');

    // Now test sending a message to the customer
    console.log('\nüì± Testing customer message...');

    if (!recentReceivable.customer.phone) {
      console.log('‚ùå Customer has no phone number');
      return;
    }

    // Manual test message
    const testMessage = {
      number: recentReceivable.customer.phone,
      text: `üîî *‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ü‡ßá‡¶∏‡ßç‡¶ü*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ${recentReceivable.customer.name},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶§‡¶•‡ßç‡¶Ø:
‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ‡ß≥${recentReceivable.cashReceivables}
‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ${recentReceivable.cylinderReceivables} ‡¶ü‡¶ø

‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡•§

‡¶∏‡¶Æ‡¶Ø‡¶º: ${new Date().toLocaleString('bn-BD')}

*‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ*`,
    };

    console.log(`üì§ Sending test message to: ${testMessage.number}`);

    // Send directly via Evolution API
    const fetch = require('node-fetch');
    const response = await fetch(
      'http://evo-p8okkk0840kg40o0o44w4gck.173.249.28.62.sslip.io/message/sendText/lpgapp',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          apikey: 'nJjnWgllihDFnx2FRk3yyIdvi5NUUFl7',
        },
        body: JSON.stringify(testMessage),
      }
    );

    const result = await response.json();

    if (response.ok) {
      console.log('‚úÖ Test message sent successfully!');
      console.log(`üìã Message ID: ${result.key?.id}`);

      // Log the message in database
      await prisma.sentMessage.create({
        data: {
          tenantId,
          providerId: provider.id,
          recipientType: 'CUSTOMER',
          recipientId: recentReceivable.customerId,
          phoneNumber: recentReceivable.customer.phone,
          message: testMessage.text,
          trigger: 'MANUAL',
          messageType: 'WHATSAPP',
          status: 'SENT',
          metadata: { messageId: result.key?.id, test: true },
          sentAt: new Date(),
        },
      });

      console.log('‚úÖ Message logged to database');
    } else {
      console.log('‚ùå Failed to send test message');
      console.log('Error:', result);
    }
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

fixCustomerMessaging();
