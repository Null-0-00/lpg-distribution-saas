const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createCylinderReturnTemplate() {
  try {
    console.log('=== CREATING CYLINDER RETURN TEMPLATE ===\n');

    // Get all tenants to add the template for each
    const tenants = await prisma.tenant.findMany({
      select: { id: true, name: true },
    });

    console.log(`Found ${tenants.length} tenants to update`);

    for (const tenant of tenants) {
      console.log(`\nProcessing tenant: ${tenant.name}`);

      // Check if cylinder return template already exists
      const existingTemplate = await prisma.messageTemplate.findFirst({
        where: {
          tenantId: tenant.id,
          trigger: 'CYLINDER_RETURN',
        },
      });

      if (existingTemplate) {
        console.log('  ‚úÖ Cylinder return template already exists');
        continue;
      }

      // Get the provider ID for this tenant
      const provider = await prisma.messageProvider.findFirst({
        where: { tenantId: tenant.id },
      });

      if (!provider) {
        console.log('  ‚ùå No message provider found for tenant');
        continue;
      }

      // Create the cylinder return template
      const template = await prisma.messageTemplate.create({
        data: {
          tenantId: tenant.id,
          providerId: provider.id,
          trigger: 'CYLINDER_RETURN',
          messageType: 'WHATSAPP',
          name: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§',
          template: `üõ¢Ô∏è *‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º {{customerName}},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {{quantity}} ‡¶ü‡¶ø {{size}} ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

üéØ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ:
üí∞ ‡¶®‡¶ó‡¶¶ ‡¶¨‡¶æ‡¶ï‡¶ø: {{cashAmount}}
üõ¢Ô∏è ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø: {{cylinderAmount}}

üìç ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ: {{areaName}}
üë§ ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ: {{receivedBy}}
‚è∞ ‡¶∏‡¶Æ‡¶Ø‡¶º: {{time}}

‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§

*‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ*`,

          variables: {
            customerName: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
            quantity: '‡¶´‡ßá‡¶∞‡¶§ ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ',
            size: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú',
            cashAmount: '‡¶®‡¶ó‡¶¶ ‡¶¨‡¶æ‡¶ï‡¶ø',
            cylinderAmount: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø',
            areaName: '‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ',
            receivedBy: '‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ',
            time: '‡¶∏‡¶Æ‡¶Ø‡¶º',
          },

          isActive: true,
          isDefault: true,
        },
      });

      console.log(`  ‚úÖ Created cylinder return template (ID: ${template.id})`);
    }

    console.log('\n=== VERIFICATION ===');

    // Verify all tenants now have the template
    for (const tenant of tenants) {
      const template = await prisma.messageTemplate.findFirst({
        where: {
          tenantId: tenant.id,
          trigger: 'CYLINDER_RETURN',
          isActive: true,
        },
      });

      console.log(
        `${tenant.name}: ${template ? '‚úÖ Has template' : '‚ùå Missing template'}`
      );
    }

    console.log('\n‚úÖ Cylinder return template setup completed!');
  } catch (error) {
    console.error('‚ùå Error creating cylinder return template:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

createCylinderReturnTemplate();
