const fs = require('fs');
const path = require('path');

console.log('üîß Fixing Receivables page translations...');

// First, let's add the missing translation keys to the translations file
const translationsPath = path.join(__dirname, 'src/lib/i18n/translations.ts');
const receivablesPath = path.join(
  __dirname,
  'src/app/dashboard/receivables/page.tsx'
);

// New translation keys needed for receivables page
const newTranslationKeys = {
  // Page title and navigation
  receivableManagement: 'Receivable Management',

  // Status labels
  success: 'Success',
  error: 'Error',

  // Action buttons and labels
  recalculate: 'Recalculate',
  exportReport: 'Export Report',
  comingSoon: 'Coming Soon',
  exportReportFunctionality: 'Export report functionality coming soon',

  // Customer receivable actions
  customerReceivableUpdatedSuccessfully:
    'Customer receivable updated successfully',
  customerReceivableAddedSuccessfully: 'Customer receivable added successfully',
  customerReceivableDeletedSuccessfully:
    'Customer receivable deleted successfully',
  failedToSaveCustomerReceivable: 'Failed to save customer receivable',
  failedToDeleteCustomerReceivable: 'Failed to delete customer receivable',

  // Payment actions
  paymentRecordedSuccessfully: 'Payment recorded successfully',
  failedToRecordPayment: 'Failed to record payment',
  cylinderReturnRecordedSuccessfully: 'Cylinder return recorded successfully',
  failedToRecordCylinderReturn: 'Failed to record cylinder return',

  // Confirmation messages
  areYouSureDeleteCustomerReceivable:
    'Are you sure you want to delete this customer receivable?',

  // Receivables changes
  failedToFetchReceivablesChanges: 'Failed to fetch receivables changes',

  // Validation and error messages
  customerReceivablesDontMatch: "Customer receivables don't match",
  driverTotalReceivablesFromSales:
    'Driver total receivables are calculated from sales data',
  customerReceivableTotalsMustEqual:
    'Customer receivable totals must equal driver sales totals',
  cashMismatch: 'Cash Mismatch',
  cylinderMismatch: 'Cylinder Mismatch',
  customerTotal: 'Customer Total',
  salesTotal: 'Sales Total',
  difference: 'Difference',

  // System information
  receivablesManagementSystemRules: 'Receivables Management System Rules',
  driverTotalReceivables: 'Driver Total Receivables',
  automaticallyCalculatedFromSales: 'Automatically calculated from sales data',
  customerReceivablesManuallyManaged:
    'Customer receivables are manually managed',
  validation: 'Validation',
  customerTotalsMustEqualDriverSales:
    'Customer totals must equal driver sales totals',
  payments: 'Payments',
  paymentsAutomaticallyAdded: 'Payments are automatically added to receivables',
  changesLog: 'Changes Log',
  changesLogAllReceivableActions: 'Changes log tracks all receivable actions',
  managerAccess: 'Manager Access',
  youCanRecordPayments: 'You can record payments and cylinder returns',

  // Customer alerts
  customersWithOverduePayments: 'customers with overdue payments',
  requireImmediate: 'require immediate',

  // Summary stats
  salesCashReceivables: 'Sales Cash Receivables',
  salesCylinderReceivables: 'Sales Cylinder Receivables',
  fromSalesData: 'From sales data',

  // Table headers and content
  cashReceivables: 'Cash Receivables',
  cylinderReceivables: 'Cylinder Receivables',
  noCashReceivables: 'No cash receivables',
  noCylinderReceivables: 'No cylinder receivables',

  // Form labels
  customerName: 'Customer Name',
  receivableType: 'Receivable Type',
  cash: 'Cash',
  cylinder: 'Cylinder',
  amount: 'Amount',
  quantity: 'Quantity',
  size: 'Size',
  dueDate: 'Due Date',
  notes: 'Notes',
  paymentMethod: 'Payment Method',
  mobile: 'Mobile',
  bank: 'Bank',
  transfer: 'Transfer',

  // Modal titles
  editCustomerReceivable: 'Edit Customer Receivable',
  addCustomerReceivable: 'Add Customer Receivable',
  recordPayment: 'Record Payment',
  recordCylinderReturn: 'Record Cylinder Return',

  // Form placeholders
  enterCustomerName: 'Enter customer name',
  enterAmount: 'Enter amount',
  enterQuantity: 'Enter quantity',
  enterNotes: 'Enter notes',
  selectSize: 'Select size',
  selectPaymentMethod: 'Select payment method',

  // Tabs
  receivables: 'Receivables',
  changes: 'Changes',

  // No data messages
  noReceivablesFound: 'No receivables found',
  noChangesRecorded: 'No changes recorded',

  // Loading states
  loadingReceivables: 'Loading receivables...',
  loadingChanges: 'Loading changes...',

  // Date formatting
  noDate: 'No date',
  invalidDate: 'Invalid date',
  noTimestamp: 'No timestamp',
  invalidTimestamp: 'Invalid timestamp',

  // Cylinder sizes
  failedToFetchCylinderSizes: 'Failed to fetch cylinder sizes',

  // Changes log
  receivablesChangesLog: 'Receivables Changes Log',
};

// Bengali translations for the new keys
const bengaliTranslations = {
  receivableManagement: '‡¶¨‡¶æ‡¶ï‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ',

  success: '‡¶∏‡¶´‡¶≤',
  error: '‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø',

  recalculate: '‡¶™‡ßÅ‡¶®‡¶∞‡ßç‡¶ó‡¶£‡¶®‡¶æ',
  exportReport: '‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∞‡¶™‡ßç‡¶§‡¶æ‡¶®‡¶ø',
  comingSoon: '‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶õ‡ßá',
  exportReportFunctionality: '‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∞‡¶™‡ßç‡¶§‡¶æ‡¶®‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶õ‡ßá',

  customerReceivableUpdatedSuccessfully: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
  customerReceivableAddedSuccessfully: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
  customerReceivableDeletedSuccessfully: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
  failedToSaveCustomerReceivable: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•',
  failedToDeleteCustomerReceivable: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•',

  paymentRecordedSuccessfully: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
  failedToRecordPayment: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•',
  cylinderReturnRecordedSuccessfully: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
  failedToRecordCylinderReturn: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•',

  areYouSureDeleteCustomerReceivable:
    '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?',

  failedToFetchReceivablesChanges: '‡¶¨‡¶æ‡¶ï‡¶ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶Ü‡¶®‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•',

  customerReceivablesDontMatch: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶Æ‡¶ø‡¶≤‡¶õ‡ßá ‡¶®‡¶æ',
  driverTotalReceivablesFromSales:
    '‡¶ö‡¶æ‡¶≤‡¶ï‡ßá‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶§‡¶•‡ßç‡¶Ø ‡¶•‡ßá‡¶ï‡ßá ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º',
  customerReceivableTotalsMustEqual:
    '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶ö‡¶æ‡¶≤‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶Æ‡ßã‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶® ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá',
  cashMismatch: '‡¶®‡¶ó‡¶¶ ‡¶Ö‡¶Æ‡¶ø‡¶≤',
  cylinderMismatch: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ö‡¶Æ‡¶ø‡¶≤',
  customerTotal: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶Æ‡ßã‡¶ü',
  salesTotal: '‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶Æ‡ßã‡¶ü',
  difference: '‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø',

  receivablesManagementSystemRules: '‡¶¨‡¶æ‡¶ï‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ',
  driverTotalReceivables: '‡¶ö‡¶æ‡¶≤‡¶ï‡ßá‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶æ‡¶ï‡¶ø',
  automaticallyCalculatedFromSales:
    '‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶§‡¶•‡ßç‡¶Ø ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º',
  customerReceivablesManuallyManaged: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º',
  validation: '‡¶¨‡ßà‡¶ß‡¶§‡¶æ',
  customerTotalsMustEqualDriverSales:
    '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶ö‡¶æ‡¶≤‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶® ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá',
  payments: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü',
  paymentsAutomaticallyAdded: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶æ‡¶ï‡¶ø‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º',
  changesLog: '‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶≤‡¶ó',
  changesLogAllReceivableActions:
    '‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶≤‡¶ó ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡ßá',
  managerAccess: '‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏',
  youCanRecordPayments: '‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®',

  customersWithOverduePayments: '‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶π ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï',
  requireImmediate: '‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®',

  salesCashReceivables: '‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶®‡¶ó‡¶¶ ‡¶¨‡¶æ‡¶ï‡¶ø',
  salesCylinderReceivables: '‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø',
  fromSalesData: '‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶§‡¶•‡ßç‡¶Ø ‡¶•‡ßá‡¶ï‡ßá',

  cashReceivables: '‡¶®‡¶ó‡¶¶ ‡¶¨‡¶æ‡¶ï‡¶ø',
  cylinderReceivables: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø',
  noCashReceivables: '‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶ó‡¶¶ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶®‡ßá‡¶á',
  noCylinderReceivables: '‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶®‡ßá‡¶á',

  customerName: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
  receivableType: '‡¶¨‡¶æ‡¶ï‡¶ø‡¶∞ ‡¶ß‡¶∞‡¶®',
  cash: '‡¶®‡¶ó‡¶¶',
  cylinder: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞',
  amount: '‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£',
  quantity: '‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ',
  size: '‡¶Ü‡¶ï‡¶æ‡¶∞',
  dueDate: '‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ',
  notes: '‡¶®‡ßã‡¶ü',
  paymentMethod: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø',
  mobile: '‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤',
  bank: '‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï',
  transfer: '‡¶∏‡ßç‡¶•‡¶æ‡¶®‡¶æ‡¶®‡ßç‡¶§‡¶∞',

  editCustomerReceivable: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ',
  addCustomerReceivable: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®',
  recordPayment: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®',
  recordCylinderReturn: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®',

  enterCustomerName: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®',
  enterAmount: '‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®',
  enterQuantity: '‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®',
  enterNotes: '‡¶®‡ßã‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®',
  selectSize: '‡¶Ü‡¶ï‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
  selectPaymentMethod: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',

  receivables: '‡¶¨‡¶æ‡¶ï‡¶ø',
  changes: '‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®',

  noReceivablesFound: '‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø',
  noChangesRecorded: '‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø',

  loadingReceivables: '‡¶¨‡¶æ‡¶ï‡¶ø ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...',
  loadingChanges: '‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...',

  noDate: '‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡ßá‡¶á',
  invalidDate: '‡¶Ö‡¶¨‡ßà‡¶ß ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ',
  noTimestamp: '‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™ ‡¶®‡ßá‡¶á',
  invalidTimestamp: '‡¶Ö‡¶¨‡ßà‡¶ß ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™',

  failedToFetchCylinderSizes: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞ ‡¶Ü‡¶®‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•',

  receivablesChangesLog: '‡¶¨‡¶æ‡¶ï‡¶ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶≤‡¶ó',
};

console.log('üìñ Reading translations file...');
let translationsContent = fs.readFileSync(translationsPath, 'utf8');

// Add new keys to English translations
console.log('‚ûï Adding new translation keys to English section...');
const englishTranslationsEndPattern =
  /(const englishTranslations: Translations = \{[\s\S]*?)(\n};)/;
const englishMatch = translationsContent.match(englishTranslationsEndPattern);

if (englishMatch) {
  let newEnglishKeys = '';
  Object.entries(newTranslationKeys).forEach(([key, value]) => {
    // Check if key already exists
    if (!translationsContent.includes(`${key}:`)) {
      newEnglishKeys += `  ${key}: '${value}',\n`;
    }
  });

  if (newEnglishKeys) {
    translationsContent = translationsContent.replace(
      englishTranslationsEndPattern,
      `$1\n  // Receivables page translations\n${newEnglishKeys}$2`
    );
  }
}

// Add new keys to Bengali translations
console.log('‚ûï Adding new translation keys to Bengali section...');
const bengaliTranslationsEndPattern =
  /(const bengaliTranslations: Translations = \{[\s\S]*?)(\n};)/;
const bengaliMatch = translationsContent.match(bengaliTranslationsEndPattern);

if (bengaliMatch) {
  let newBengaliKeys = '';
  Object.entries(bengaliTranslations).forEach(([key, value]) => {
    // Check if key already exists
    if (!translationsContent.includes(`${key}:`)) {
      newBengaliKeys += `  ${key}: '${value}',\n`;
    }
  });

  if (newBengaliKeys) {
    translationsContent = translationsContent.replace(
      bengaliTranslationsEndPattern,
      `$1\n  // Receivables page translations\n${newBengaliKeys}$2`
    );
  }
}

// Write updated translations file
console.log('üíæ Writing updated translations file...');
fs.writeFileSync(translationsPath, translationsContent);

console.log('üìù Updating Receivables page component...');
let pageContent = fs.readFileSync(receivablesPath, 'utf8');

// Replace hardcoded strings with translation calls
const replacements = [
  // Toast messages
  ["title: 'Success',", "title: t('success'),"],
  ["title: 'Error',", "title: t('error'),"],
  [
    "description: 'Failed to fetch receivables changes',",
    "description: t('failedToFetchReceivablesChanges'),",
  ],
  [
    "description: 'Failed to save customer receivable',",
    "description: t('failedToSaveCustomerReceivable'),",
  ],
  [
    "description: 'Customer receivable deleted successfully',",
    "description: t('customerReceivableDeletedSuccessfully'),",
  ],
  [
    "description: 'Failed to delete customer receivable',",
    "description: t('failedToDeleteCustomerReceivable'),",
  ],
  [
    "description: 'Payment recorded successfully',",
    "description: t('paymentRecordedSuccessfully'),",
  ],
  [
    "description: 'Failed to record payment',",
    "description: t('failedToRecordPayment'),",
  ],
  [
    "description: 'Cylinder return recorded successfully',",
    "description: t('cylinderReturnRecordedSuccessfully'),",
  ],
  [
    "description: 'Failed to record cylinder return',",
    "description: t('failedToRecordCylinderReturn'),",
  ],

  // Confirmation messages
  [
    "'Are you sure you want to delete this customer receivable?'",
    "t('areYouSureDeleteCustomerReceivable')",
  ],

  // Console error messages
  [
    "console.error('Failed to fetch cylinder sizes:', error);",
    "console.error(t('failedToFetchCylinderSizes'), error);",
  ],

  // Table headers and labels
  ["'Cash Receivables'", "t('cashReceivables')"],
  ["'No cash receivables'", "t('noCashReceivables')"],
  ["'Sales Cash Receivable: '", "t('salesCashReceivables') + ': '"],

  // Form default values
  ["paymentMethod: 'cash',", "paymentMethod: 'cash',"], // Keep as is for now
  ["receivableType: 'CASH',", "receivableType: 'CASH',"], // Keep as is for now

  // Status and validation text
  ["'Customer receivables don\\'t match'", "t('customerReceivablesDontMatch')"],
  ["'customers with overdue payments'", "t('customersWithOverduePayments')"],
  ["'require immediate'", "t('requireImmediate')"],
];

// Apply replacements
let replacementCount = 0;
replacements.forEach(([search, replace]) => {
  if (pageContent.includes(search)) {
    pageContent = pageContent.replace(
      new RegExp(search.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'),
      replace
    );
    console.log(`‚úÖ Replaced: ${search.substring(0, 50)}...`);
    replacementCount++;
  }
});

// Write updated page content
fs.writeFileSync(receivablesPath, pageContent);

console.log(`\nüéâ Receivables page translations fixed!`);
console.log(`‚ú® Applied ${replacementCount} replacements.`);
console.log(
  `üìä Added ${Object.keys(newTranslationKeys).length} new translation keys.`
);

console.log('\nüìã Summary of changes:');
console.log('‚úÖ Added translation keys for toast messages and alerts');
console.log('‚úÖ Replaced hardcoded English text with translation calls');
console.log('‚úÖ Added proper Bengali translations for all UI elements');
console.log('‚úÖ Fixed error messages and confirmation dialogs');
console.log('‚úÖ Localized form labels and placeholders');

console.log(
  '\nüöÄ The Receivables page should now display properly in Bengali!'
);
