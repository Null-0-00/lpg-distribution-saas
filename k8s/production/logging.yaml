apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: lpg-distributor-production
data:
  fluent.conf: |
    # Input sources
    <source>
      @type tail
      path /var/log/containers/*lpg-distributor*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      format json
      time_format %Y-%m-%dT%H:%M:%S.%NZ
      time_key time
      keep_time_key true
    </source>
    
    <source>
      @type tail
      path /var/log/containers/*postgresql*.log
      pos_file /var/log/fluentd-postgresql.log.pos
      tag postgresql.*
      format none
      time_format %Y-%m-%d %H:%M:%S.%L %Z
    </source>
    
    <source>
      @type tail
      path /var/log/containers/*redis*.log
      pos_file /var/log/fluentd-redis.log.pos
      tag redis.*
      format none
    </source>
    
    # Kubernetes metadata
    <filter kubernetes.**>
      @type kubernetes_metadata
      @id filter_kube_metadata
      kubernetes_url "#{ENV['KUBERNETES_SERVICE_HOST']}:#{ENV['KUBERNETES_SERVICE_PORT_HTTPS']}"
      verify_ssl "#{ENV['KUBERNETES_VERIFY_SSL'] || true}"
      ca_file "#{ENV['KUBERNETES_CA_FILE']}"
      skip_labels false
      skip_container_metadata false
      skip_master_url false
      skip_namespace_metadata false
    </filter>
    
    # Parse application logs
    <filter kubernetes.var.log.containers.**lpg-distributor**.log>
      @type parser
      key_name log
      reserve_data true
      remove_key_name_field true
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key timestamp
          time_format %Y-%m-%dT%H:%M:%S.%LZ
        </pattern>
        <pattern>
          format regexp
          expression /^(?<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)\s+(?<level>\w+)\s+(?<message>.*)$/
          time_key timestamp
          time_format %Y-%m-%dT%H:%M:%S.%LZ
        </pattern>
      </parse>
    </filter>
    
    # Add environment and service tags
    <filter kubernetes.**>
      @type record_transformer
      <record>
        environment production
        service_name ${record.kubernetes.labels.app}
        namespace ${record.kubernetes.namespace_name}
        pod_name ${record.kubernetes.pod_name}
        container_name ${record.kubernetes.container_name}
        node_name ${record.kubernetes.host}
      </record>
    </filter>
    
    # Route logs based on severity
    <match kubernetes.**>
      @type rewrite_tag_filter
      <rule>
        key level
        pattern ^(ERROR|FATAL|error|fatal)$
        tag error.${tag}
      </rule>
      <rule>
        key level
        pattern ^(WARN|warning|warn)$
        tag warning.${tag}
      </rule>
      <rule>
        key level
        pattern .*
        tag info.${tag}
      </rule>
    </match>
    
    # Error logs to alerting system
    <match error.**>
      @type copy
      <store>
        @type elasticsearch
        host elasticsearch-service
        port 9200
        index_name error-logs
        type_name _doc
        include_tag_key true
        tag_key @log_name
        flush_interval 5s
      </store>
      <store>
        @type slack
        webhook_url "#{ENV['SLACK_WEBHOOK_URL']}"
        channel "#alerts"
        username "fluentd"
        icon_emoji ":warning:"
        message "Error in %s: %s"
        message_keys service_name,message
        flush_interval 10s
      </store>
    </match>
    
    # Warning logs
    <match warning.**>
      @type elasticsearch
      host elasticsearch-service
      port 9200
      index_name warning-logs
      type_name _doc
      include_tag_key true
      tag_key @log_name
      flush_interval 10s
    </match>
    
    # Info logs
    <match info.**>
      @type elasticsearch
      host elasticsearch-service
      port 9200
      index_name application-logs
      type_name _doc
      include_tag_key true
      tag_key @log_name
      flush_interval 30s
    </match>
    
    # Database logs
    <match postgresql.**>
      @type elasticsearch
      host elasticsearch-service
      port 9200
      index_name database-logs
      type_name _doc
      include_tag_key true
      tag_key @log_name
      flush_interval 30s
    </match>
    
    # Redis logs
    <match redis.**>
      @type elasticsearch
      host elasticsearch-service
      port 9200
      index_name redis-logs
      type_name _doc
      include_tag_key true
      tag_key @log_name
      flush_interval 30s
    </match>

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: lpg-distributor-production
  labels:
    app: fluentd
    environment: production
spec:
  selector:
    matchLabels:
      app: fluentd
  template:
    metadata:
      labels:
        app: fluentd
        environment: production
    spec:
      serviceAccountName: fluentd
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: fluentd
        image: fluent/fluentd-kubernetes-daemonset:v1-debian-elasticsearch
        env:
        - name: FLUENT_ELASTICSEARCH_HOST
          value: "elasticsearch-service"
        - name: FLUENT_ELASTICSEARCH_PORT
          value: "9200"
        - name: FLUENT_ELASTICSEARCH_SCHEME
          value: "http"
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: fluentd-secrets
              key: slack-webhook-url
        resources:
          limits:
            memory: 512Mi
            cpu: 100m
          requests:
            memory: 256Mi
            cpu: 50m
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: fluentd-config
          mountPath: /fluentd/etc/fluent.conf
          subPath: fluent.conf
        securityContext:
          runAsUser: 0
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: fluentd-config
        configMap:
          name: fluentd-config

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: lpg-distributor-production
  labels:
    app: fluentd

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluentd
  labels:
    app: fluentd
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  verbs:
  - get
  - list
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluentd
  labels:
    app: fluentd
roleRef:
  kind: ClusterRole
  name: fluentd
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: fluentd
  namespace: lpg-distributor-production

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: lpg-distributor-production
  labels:
    app: elasticsearch
    environment: production
spec:
  serviceName: elasticsearch-service
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
        environment: production
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
        env:
        - name: discovery.type
          value: single-node
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        - name: xpack.security.enabled
          value: "false"
        - name: xpack.monitoring.collection.enabled
          value: "true"
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: elasticsearch-storage
          mountPath: /usr/share/elasticsearch/data
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 90
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-service
  namespace: lpg-distributor-production
  labels:
    app: elasticsearch
    environment: production
spec:
  selector:
    app: elasticsearch
  ports:
  - name: http
    port: 9200
    targetPort: 9200
  - name: transport
    port: 9300
    targetPort: 9300
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: lpg-distributor-production
  labels:
    app: kibana
    environment: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
        environment: production
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:8.8.0
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "http://elasticsearch-service:9200"
        - name: SERVER_NAME
          value: "kibana"
        - name: SERVER_HOST
          value: "0.0.0.0"
        ports:
        - containerPort: 5601
          name: kibana
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 90
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: kibana-service
  namespace: lpg-distributor-production
  labels:
    app: kibana
    environment: production
spec:
  selector:
    app: kibana
  ports:
  - name: kibana
    port: 5601
    targetPort: 5601
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kibana-ingress
  namespace: lpg-distributor-production
  labels:
    app: kibana
    environment: production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: kibana-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
spec:
  tls:
  - hosts:
    - logs.lpg-distributor.com
    secretName: kibana-tls
  rules:
  - host: logs.lpg-distributor.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kibana-service
            port:
              number: 5601