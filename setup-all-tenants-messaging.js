// Universal setup script for Evolution API messaging across all tenants
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function setupAllTenantsMessaging() {
  try {
    console.log('üöÄ Setting up Evolution API messaging for all tenants...\n');

    // Get all active tenants
    const tenants = await prisma.tenant.findMany({
      where: { isActive: true },
      select: {
        id: true,
        name: true,
        _count: {
          select: {
            customers: { where: { isActive: true } },
          },
        },
      },
    });

    if (tenants.length === 0) {
      console.log('‚ùå No active tenants found');
      return;
    }

    console.log(`üè¢ Found ${tenants.length} active tenants:`);
    tenants.forEach((tenant) => {
      console.log(
        `  - ${tenant.name} (${tenant.id}) - ${tenant._count.customers} customers`
      );
    });

    console.log('\nüîß Starting messaging setup for all tenants...\n');

    for (const tenant of tenants) {
      console.log(`\nüìã Processing tenant: ${tenant.name}`);
      console.log(`üÜî Tenant ID: ${tenant.id}`);

      try {
        // 1. Check/Create messaging settings
        let messagingSettings = await prisma.messagingSettings.findUnique({
          where: { tenantId: tenant.id },
        });

        if (!messagingSettings) {
          console.log('  ‚öôÔ∏è Creating messaging settings...');
          messagingSettings = await prisma.messagingSettings.create({
            data: {
              tenantId: tenant.id,
              whatsappEnabled: true,
              smsEnabled: false,
              emailEnabled: false,
              receivablesNotificationsEnabled: true,
              paymentNotificationsEnabled: true,
              overdueRemindersEnabled: true,
            },
          });
          console.log('  ‚úÖ Messaging settings created');
        } else {
          console.log('  ‚úÖ Messaging settings already exist');
        }

        // 2. Check/Create message provider
        let provider = await prisma.messageProvider.findFirst({
          where: {
            tenantId: tenant.id,
            isActive: true,
            type: 'WHATSAPP_BUSINESS',
          },
        });

        if (!provider) {
          console.log('  üîß Creating Evolution API provider...');
          provider = await prisma.messageProvider.create({
            data: {
              tenantId: tenant.id,
              name: 'Evolution API',
              type: 'WHATSAPP_BUSINESS',
              config: {
                provider: 'evolution',
                apiUrl:
                  process.env.EVOLUTION_API_URL ||
                  'http://evo-p8okkk0840kg40o0o44w4gck.173.249.28.62.sslip.io/',
                apiKey:
                  process.env.EVOLUTION_API_KEY ||
                  'nJjnWgllihDFnx2FRk3yyIdvi5NUUFl7',
                instanceName: process.env.EVOLUTION_INSTANCE_NAME || 'lpgapp',
                webhookUrl:
                  process.env.EVOLUTION_WEBHOOK_URL ||
                  'http://localhost:3000/api/messaging/evolution/webhook',
                fromNumber: process.env.EVOLUTION_INSTANCE_NAME || 'lpgapp',
              },
              isActive: true,
              isDefault: true,
            },
          });
          console.log('  ‚úÖ Evolution API provider created');
        } else {
          console.log('  ‚úÖ Message provider already exists');
        }

        // 3. Create/Update default message templates
        const templates = [
          {
            name: 'Customer Receivables Change',
            trigger: 'RECEIVABLES_CHANGE',
            messageType: 'WHATSAPP',
            template: `üîî *‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º {{customerName}},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:

‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ‡ß≥{{oldAmount}}
‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ‡ß≥{{newAmount}}
‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: {{change}} ({{changeType}})

‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ‡ß≥{{cashAmount}}
‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{cylinderAmount}} ‡¶ü‡¶ø

‡¶è‡¶≤‡¶æ‡¶ï‡¶æ: {{areaName}}
‡¶∏‡¶Æ‡¶Ø‡¶º: {{date}} {{time}}
‡¶ï‡¶æ‡¶∞‡¶£: {{changeReason}}

*{{companyName}}*`,
            variables: {
              customerName: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
              oldAmount: '‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
              newAmount: '‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
              change: '‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®',
              changeType: '‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø/‡¶π‡ßç‡¶∞‡¶æ‡¶∏',
              cashAmount: '‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
              cylinderAmount: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
              areaName: '‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ',
              date: '‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ',
              time: '‡¶∏‡¶Æ‡¶Ø‡¶º',
              changeReason: '‡¶ï‡¶æ‡¶∞‡¶£',
              companyName: '‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ',
            },
          },
          {
            name: 'Payment Received Confirmation',
            trigger: 'PAYMENT_RECEIVED',
            messageType: 'WHATSAPP',
            template: `‚úÖ *‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º {{customerName}},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡ß≥{{amount}} ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ {{paymentType}} ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ: {{receivedBy}}
‡¶∏‡¶Æ‡¶Ø‡¶º: {{date}} {{time}}

‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!

*{{companyName}}*`,
            variables: {
              customerName: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
              amount: '‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£',
              paymentType: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∞',
              receivedBy: '‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ',
              date: '‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ',
              time: '‡¶∏‡¶Æ‡¶Ø‡¶º',
              companyName: '‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ',
            },
          },
          {
            name: 'Overdue Reminder',
            trigger: 'OVERDUE_REMINDER',
            messageType: 'WHATSAPP',
            template: `‚ö†Ô∏è *‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶®*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º {{customerName}},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡ß≥{{amount}} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§
‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶: {{daysOverdue}} ‡¶¶‡¶ø‡¶®

‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ‡ß≥{{cashAmount}}
‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{cylinderAmount}} ‡¶ü‡¶ø

‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶§ ‡¶§‡¶æ‡¶°‡¶º‡¶æ‡¶§‡¶æ‡¶°‡¶º‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó: {{contactNumber}}

*{{companyName}}*`,
            variables: {
              customerName: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
              amount: '‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
              daysOverdue: '‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®',
              cashAmount: '‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
              cylinderAmount: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
              contactNumber: '‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞',
              companyName: '‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ',
            },
          },
        ];

        console.log('  üìù Creating/updating message templates...');
        let templatesCreated = 0;
        let templatesUpdated = 0;

        for (const templateData of templates) {
          const result = await prisma.messageTemplate.upsert({
            where: {
              tenantId_trigger_messageType: {
                tenantId: tenant.id,
                trigger: templateData.trigger,
                messageType: templateData.messageType,
              },
            },
            update: {
              name: templateData.name,
              template: templateData.template,
              variables: templateData.variables,
              isActive: true,
            },
            create: {
              tenantId: tenant.id,
              providerId: provider.id,
              name: templateData.name,
              trigger: templateData.trigger,
              messageType: templateData.messageType,
              template: templateData.template,
              variables: templateData.variables,
              isActive: true,
              isDefault: true,
            },
          });

          // Check if it was created or updated (Prisma doesn't return this info directly)
          const existingTemplate = await prisma.messageTemplate.findFirst({
            where: {
              tenantId: tenant.id,
              trigger: templateData.trigger,
              messageType: templateData.messageType,
              createdAt: { lt: new Date(Date.now() - 1000) }, // Created more than 1 second ago
            },
          });

          if (existingTemplate) {
            templatesUpdated++;
          } else {
            templatesCreated++;
          }
        }

        console.log(
          `  ‚úÖ Templates processed: ${templatesCreated} created, ${templatesUpdated} updated`
        );

        // 4. Get customer statistics for this tenant
        const totalCustomers = await prisma.customer.count({
          where: {
            tenantId: tenant.id,
            isActive: true,
          },
        });

        const customersWithPhone = await prisma.customer.count({
          where: {
            tenantId: tenant.id,
            isActive: true,
            phone: { not: null },
          },
        });
        console.log(
          `  üìä Customer stats: ${totalCustomers} total, ${customersWithPhone} with phone numbers`
        );

        console.log(`  üéâ Messaging setup completed for ${tenant.name}`);
      } catch (tenantError) {
        console.error(
          `  ‚ùå Error setting up messaging for ${tenant.name}:`,
          tenantError.message
        );
      }
    }

    console.log('\nüéØ Summary:');
    console.log(`‚úÖ Processed ${tenants.length} tenants`);

    // Final verification
    const totalProviders = await prisma.messageProvider.count({
      where: { isActive: true, type: 'WHATSAPP_BUSINESS' },
    });

    const totalTemplates = await prisma.messageTemplate.count({
      where: { isActive: true },
    });

    const totalSettings = await prisma.messagingSettings.count({
      where: { whatsappEnabled: true },
    });

    console.log(`üìä System totals:`);
    console.log(`   - Active WhatsApp providers: ${totalProviders}`);
    console.log(`   - Active message templates: ${totalTemplates}`);
    console.log(`   - Tenants with WhatsApp enabled: ${totalSettings}`);

    console.log(
      '\nüöÄ All tenants are now ready for automated customer messaging!'
    );
    console.log(
      'üì± Any receivables change will automatically trigger WhatsApp messages to customers.'
    );
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error(error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

setupAllTenantsMessaging();
