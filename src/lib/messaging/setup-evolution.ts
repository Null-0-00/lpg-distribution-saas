// Evolution API Setup and Integration
// Sets up Evolution API provider and default templates

import { prisma } from '@/lib/prisma';
import {
  MessageProviderType,
  MessageType,
  MessageTrigger,
} from '@prisma/client';

export interface EvolutionSetupConfig {
  tenantId: string;
  apiUrl: string;
  apiKey: string;
  instanceName: string;
  webhookUrl?: string;
}

/**
 * Setup Evolution API provider for a tenant
 */
export async function setupEvolutionProvider(config: EvolutionSetupConfig) {
  try {
    // Create or update Evolution API provider
    const provider = await prisma.messageProvider.upsert({
      where: {
        tenantId_name: {
          tenantId: config.tenantId,
          name: 'Evolution API',
        },
      },
      update: {
        config: {
          provider: 'evolution',
          apiUrl: config.apiUrl,
          apiKey: config.apiKey,
          instanceName: config.instanceName,
          webhookUrl: config.webhookUrl,
          fromNumber: config.instanceName, // Use instance name as identifier
        },
        isActive: true,
        isDefault: true,
      },
      create: {
        tenantId: config.tenantId,
        name: 'Evolution API',
        type: MessageProviderType.WHATSAPP_BUSINESS,
        config: {
          provider: 'evolution',
          apiUrl: config.apiUrl,
          apiKey: config.apiKey,
          instanceName: config.instanceName,
          webhookUrl: config.webhookUrl,
          fromNumber: config.instanceName,
        },
        isActive: true,
        isDefault: true,
      },
    });

    // Create default message templates
    await createDefaultTemplates(config.tenantId, provider.id);

    // Setup messaging settings
    await prisma.messagingSettings.upsert({
      where: { tenantId: config.tenantId },
      update: {
        whatsappEnabled: true,
        receivablesNotificationsEnabled: true,
        paymentNotificationsEnabled: true,
        overdueRemindersEnabled: true,
      },
      create: {
        tenantId: config.tenantId,
        whatsappEnabled: true,
        smsEnabled: false,
        emailEnabled: false,
        receivablesNotificationsEnabled: true,
        paymentNotificationsEnabled: true,
        overdueRemindersEnabled: true,
      },
    });

    return {
      success: true,
      providerId: provider.id,
      message: 'Evolution API provider setup successfully',
    };
  } catch (error) {
    console.error('Error setting up Evolution API provider:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

/**
 * Create default WhatsApp message templates for receivables
 */
async function createDefaultTemplates(tenantId: string, providerId: string) {
  const templates = [
    {
      name: 'Receivables Change Notification',
      trigger: MessageTrigger.RECEIVABLES_CHANGE,
      messageType: MessageType.WHATSAPP,
      template: `üîî *‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü*

{{driverName}} ‡¶≠‡¶æ‡¶á,
‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ {{changeType}} {{change}} ‡¶ü‡¶æ‡¶ï‡¶æ

‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{oldAmount}}
‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{newAmount}}
‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: {{change}}

‡¶∏‡¶Æ‡¶Ø‡¶º: {{date}} {{time}}
‡¶ï‡¶æ‡¶∞‡¶£: {{changeReason}}

*‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ*`,
      variables: {
        driverName: '‡¶ö‡¶æ‡¶≤‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
        amount: '‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£',
        oldAmount: '‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
        newAmount: '‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
        change: '‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®',
        changeType: '‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø/‡¶π‡ßç‡¶∞‡¶æ‡¶∏',
        date: '‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ',
        time: '‡¶∏‡¶Æ‡¶Ø‡¶º',
        changeReason: '‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£',
      },
    },
    {
      name: 'Payment Received Confirmation',
      trigger: MessageTrigger.PAYMENT_RECEIVED,
      messageType: MessageType.WHATSAPP,
      template: `‚úÖ *‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤*

{{driverName}} ‡¶≠‡¶æ‡¶á,
‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {{amount}} ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ {{paymentType}} ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

‡¶∏‡¶Æ‡¶Ø‡¶º: {{date}} {{time}}

‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!

*‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ*`,
      variables: {
        driverName: '‡¶ö‡¶æ‡¶≤‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
        amount: '‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£',
        paymentType: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∞',
        date: '‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ',
        time: '‡¶∏‡¶Æ‡¶Ø‡¶º',
      },
    },
    {
      name: 'Cylinder Return Reminder',
      trigger: MessageTrigger.CYLINDER_RETURN,
      messageType: MessageType.WHATSAPP,
      template: `üîÑ *‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§*

{{driverName}} ‡¶≠‡¶æ‡¶á,
‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {{cylinderChange}} ‡¶ü‡¶ø ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

‡¶Æ‡ßã‡¶ü ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{newAmount}}

‡¶∏‡¶Æ‡¶Ø‡¶º: {{date}} {{time}}

*‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ*`,
      variables: {
        driverName: '‡¶ö‡¶æ‡¶≤‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
        cylinderChange: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®',
        newAmount: '‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
        date: '‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ',
        time: '‡¶∏‡¶Æ‡¶Ø‡¶º',
      },
    },
    {
      name: 'Overdue Reminder',
      trigger: MessageTrigger.OVERDUE_REMINDER,
      messageType: MessageType.WHATSAPP,
      template: `‚ö†Ô∏è *‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶®*

{{driverName}} ‡¶≠‡¶æ‡¶á,
‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ {{amount}} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§

‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{cashAmount}}
‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{cylinderAmount}}

‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶§ ‡¶§‡¶æ‡¶°‡¶º‡¶æ‡¶§‡¶æ‡¶°‡¶º‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

*‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ*`,
      variables: {
        driverName: '‡¶ö‡¶æ‡¶≤‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
        amount: '‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
        cashAmount: '‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
        cylinderAmount: '‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
      },
    },
    {
      name: 'Sale Confirmation',
      trigger: MessageTrigger.SALE_CONFIRMATION,
      messageType: MessageType.WHATSAPP,
      template: `üìã *‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£*

{{driverName}} ‡¶≠‡¶æ‡¶á,
‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶§‡¶•‡ßç‡¶Ø:

‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º: {{totalSales}} ‡¶ü‡¶æ‡¶ï‡¶æ
‡¶ú‡¶Æ‡¶æ: {{deposits}} ‡¶ü‡¶æ‡¶ï‡¶æ
‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: {{receivables}} ‡¶ü‡¶æ‡¶ï‡¶æ

‡¶∏‡¶Æ‡¶Ø‡¶º: {{date}} {{time}}

*‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ*`,
      variables: {
        driverName: '‡¶ö‡¶æ‡¶≤‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ',
        totalSales: '‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º',
        deposits: '‡¶ú‡¶Æ‡¶æ',
        receivables: '‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ',
        date: '‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ',
        time: '‡¶∏‡¶Æ‡¶Ø‡¶º',
      },
    },
  ];

  for (const template of templates) {
    await prisma.messageTemplate.upsert({
      where: {
        tenantId_trigger_messageType: {
          tenantId,
          trigger: template.trigger,
          messageType: template.messageType,
        },
      },
      update: {
        name: template.name,
        template: template.template,
        variables: template.variables,
        isActive: true,
        isDefault: true,
      },
      create: {
        tenantId,
        providerId,
        name: template.name,
        trigger: template.trigger,
        messageType: template.messageType,
        template: template.template,
        variables: template.variables,
        isActive: true,
        isDefault: true,
      },
    });
  }
}

/**
 * Get Evolution API connection status
 */
export async function getEvolutionStatus(tenantId: string) {
  try {
    const provider = await prisma.messageProvider.findFirst({
      where: {
        tenantId,
        type: MessageProviderType.WHATSAPP_BUSINESS,
        isActive: true,
      },
    });

    if (!provider) {
      return {
        connected: false,
        error: 'Evolution API provider not found',
      };
    }

    const config = provider.config as any;
    if (config.provider !== 'evolution') {
      return {
        connected: false,
        error: 'Provider is not Evolution API',
      };
    }

    // Import and check Evolution provider status
    const { EvolutionProvider } = await import('./providers/evolution');
    const evolutionProvider = new EvolutionProvider({
      apiUrl: config.apiUrl,
      apiKey: config.apiKey,
      instanceName: config.instanceName,
      webhookUrl: config.webhookUrl,
    });

    const status = await evolutionProvider.getConnectionStatus();

    return {
      connected: status.connected,
      status: status.status,
      qrCode: status.qrCode,
      instanceName: config.instanceName,
      providerId: provider.id,
    };
  } catch (error) {
    console.error('Error getting Evolution status:', error);
    return {
      connected: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

/**
 * Test Evolution API by sending a test message
 */
export async function testEvolutionAPI(
  tenantId: string,
  testPhoneNumber: string
) {
  try {
    const provider = await prisma.messageProvider.findFirst({
      where: {
        tenantId,
        type: MessageProviderType.WHATSAPP_BUSINESS,
        isActive: true,
      },
    });

    if (!provider) {
      throw new Error('Evolution API provider not found');
    }

    const config = provider.config as any;
    const { EvolutionProvider } = await import('./providers/evolution');
    const evolutionProvider = new EvolutionProvider({
      apiUrl: config.apiUrl,
      apiKey: config.apiKey,
      instanceName: config.instanceName,
      webhookUrl: config.webhookUrl,
    });

    const testMessage = `üß™ *‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú*

‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú Evolution API ‡¶•‡ßá‡¶ï‡ßá‡•§

‡¶∏‡¶Æ‡¶Ø‡¶º: ${new Date().toLocaleString('bn-BD')}

*‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ*`;

    const result = await evolutionProvider.sendMessage({
      to: testPhoneNumber,
      message: testMessage,
    });

    // Log the test message
    await prisma.sentMessage.create({
      data: {
        tenantId,
        providerId: provider.id,
        recipientType: 'ADMIN',
        phoneNumber: testPhoneNumber,
        message: testMessage,
        trigger: MessageTrigger.MANUAL,
        messageType: MessageType.WHATSAPP,
        status: result.status,
        metadata: { test: true, messageId: result.messageId },
        sentAt: result.success ? new Date() : null,
        errorMessage: result.error,
      },
    });

    return result;
  } catch (error) {
    console.error('Error testing Evolution API:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}
