// Test cylinder receivables messaging with size breakdown
const { PrismaClient } = require('@prisma/client');
const fetch = require('node-fetch');
const prisma = new PrismaClient();

// Function to convert English numbers to Bengali
function toBengaliNumber(num) {
  const bengaliNumerals = ['‡ß¶', '‡ßß', '‡ß®', '‡ß©', '‡ß™', '‡ß´', '‡ß¨', '‡ß≠', '‡ßÆ', '‡ßØ'];
  return num
    .toString()
    .replace(/\d/g, (digit) => bengaliNumerals[parseInt(digit)]);
}

// Function to format cylinder receivables by size
function formatCylinderReceivablesBySize(sizeBreakdown) {
  const entries = Object.entries(sizeBreakdown);
  if (entries.length === 0) {
    return '‡ß¶ ‡¶ü‡¶ø';
  }

  return entries
    .filter(([_, quantity]) => quantity > 0)
    .map(([size, quantity]) => `${size}: ${toBengaliNumber(quantity)} ‡¶ü‡¶ø`)
    .join(', ');
}

async function testCylinderSizesMessaging() {
  try {
    console.log(
      'üß™ Testing cylinder receivables messaging with size breakdown...\n'
    );

    // Find Sakib
    const sakib = await prisma.customer.findFirst({
      where: {
        name: 'Sakib',
        phone: '+8801793536151',
        isActive: true,
      },
    });

    if (!sakib) {
      console.log('‚ùå Sakib not found');
      return;
    }

    console.log(`üë§ Customer: ${sakib.name}`);
    console.log(`üì± Phone: ${sakib.phone}`);

    // Get current cylinder receivables by size
    const cylinderReceivables = await prisma.customerReceivable.findMany({
      where: {
        tenantId: sakib.tenantId,
        customerName: sakib.name,
        receivableType: 'CYLINDER',
        status: { not: 'PAID' },
      },
      select: {
        quantity: true,
        size: true,
      },
    });

    const sizeBreakdown = {};
    cylinderReceivables.forEach((receivable) => {
      const size = receivable.size || '12L';
      sizeBreakdown[size] = (sizeBreakdown[size] || 0) + receivable.quantity;
    });

    console.log('\nüìä Current cylinder receivables by size:');
    Object.entries(sizeBreakdown).forEach(([size, quantity]) => {
      console.log(`${size}: ${quantity} ‡¶ü‡¶ø`);
    });

    const formattedCylinderReceivables =
      formatCylinderReceivablesBySize(sizeBreakdown);
    console.log(`\nFormatted: ${formattedCylinderReceivables}`);

    // Get tenant name
    const tenant = await prisma.tenant.findUnique({
      where: { id: sakib.tenantId },
      select: { name: true },
    });

    // Test 1: Payment Received Message with size breakdown
    console.log('\nüîÑ Testing Payment Received Message with size breakdown...');
    const paymentAmount = 100;
    const cashReceivables = 390;

    const paymentMessage = {
      number: sakib.phone,
      text: `*${tenant?.name || 'Eureka'}*
‚úÖ *‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ${sakib.name},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${toBengaliNumber(paymentAmount)} ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶®‡¶ó‡¶¶ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶° ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ:
üí∞ ‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ${toBengaliNumber(cashReceivables)} ‡¶ü‡¶æ‡¶ï‡¶æ
üõ¢Ô∏è ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ${formattedCylinderReceivables}

‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ: Sakib (Admin)
‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${new Date().toLocaleDateString('bn-BD')}
‡¶∏‡¶Æ‡¶Ø‡¶º: ${new Date().toLocaleTimeString('bn-BD')}

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶§ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!

*${tenant?.name || 'Eureka'} - ‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞*`,
    };

    console.log('üì® Payment Message with size breakdown:');
    console.log(paymentMessage.text);

    // Test 2: Cylinder Return Message with size breakdown
    console.log('\nüîÑ Testing Cylinder Return Message with size breakdown...');
    const returnQuantity = 2;
    const returnSize = '12L';

    // Calculate what the breakdown would be after returning 2x 12L cylinders
    const updatedSizeBreakdown = { ...sizeBreakdown };
    updatedSizeBreakdown[returnSize] = Math.max(
      0,
      (updatedSizeBreakdown[returnSize] || 0) - returnQuantity
    );
    const updatedFormattedCylinders =
      formatCylinderReceivablesBySize(updatedSizeBreakdown);

    const cylinderReturnMessage = {
      number: sakib.phone,
      text: `*${tenant?.name || 'Eureka'}*
üõ¢Ô∏è *‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ${sakib.name},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${toBengaliNumber(returnQuantity)} ‡¶ü‡¶ø ${returnSize} ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

‡¶´‡ßá‡¶∞‡¶§‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶° ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ:
üí∞ ‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ${toBengaliNumber(cashReceivables)} ‡¶ü‡¶æ‡¶ï‡¶æ
üõ¢Ô∏è ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ${updatedFormattedCylinders}

‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ: Sakib (Admin)
‡¶´‡ßá‡¶∞‡¶§ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${new Date().toLocaleDateString('bn-BD')}
‡¶∏‡¶Æ‡¶Ø‡¶º: ${new Date().toLocaleTimeString('bn-BD')}

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶§ ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!

*${tenant?.name || 'Eureka'} - ‡¶è‡¶≤‡¶™‡¶ø‡¶ú‡¶ø ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü‡¶∞*`,
    };

    console.log('üì® Cylinder Return Message with size breakdown:');
    console.log(cylinderReturnMessage.text);

    // Test 3: Receivables Change Message with size breakdown
    console.log(
      '\nüîÑ Testing Receivables Change Message with size breakdown...'
    );

    const receivablesChangeMessage = {
      number: sakib.phone,
      text: `üîî *‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ${sakib.name},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:

üõ¢Ô∏è ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:
‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶®: ${formattedCylinderReceivables}
‡¶®‡¶§‡ßÅ‡¶®: ${updatedFormattedCylinders}
‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: ${toBengaliNumber(returnQuantity)} ‡¶ü‡¶ø (‡¶ï‡¶Æ‡ßá‡¶õ‡ßá)

‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ:
üí∞ ‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ${toBengaliNumber(cashReceivables)} ‡¶ü‡¶æ‡¶ï‡¶æ
üõ¢Ô∏è ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ${updatedFormattedCylinders}

‡¶∏‡¶Æ‡¶Ø‡¶º: ${new Date().toLocaleDateString('bn-BD')} ${new Date().toLocaleTimeString('bn-BD')}
‡¶ï‡¶æ‡¶∞‡¶£: ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

*${tenant?.name || 'Eureka'}*`,
    };

    console.log('üì® Receivables Change Message with size breakdown:');
    console.log(receivablesChangeMessage.text);

    // Test 4: Overdue Reminder with size breakdown
    console.log('\nüîÑ Testing Overdue Reminder Message with size breakdown...');
    const totalAmount =
      cashReceivables + Object.values(sizeBreakdown).reduce((a, b) => a + b, 0);
    const daysOverdue = 5;

    const overdueMessage = {
      number: sakib.phone,
      text: `‚ö†Ô∏è *‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶®*

‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ${sakib.name},

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ${toBengaliNumber(totalAmount)} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§
‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶: ${toBengaliNumber(daysOverdue)} ‡¶¶‡¶ø‡¶®

‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ${toBengaliNumber(cashReceivables)} ‡¶ü‡¶æ‡¶ï‡¶æ
‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ: ${formattedCylinderReceivables}

‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶§ ‡¶§‡¶æ‡¶°‡¶º‡¶æ‡¶§‡¶æ‡¶°‡¶º‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó: +‡ßÆ‡ßÆ‡ß¶‡ßß‡ß≠‡ßØ‡ß©‡ß´‡ß©‡ß¨‡ßß‡ß´‡ßß

*${tenant?.name || 'Eureka'}*`,
    };

    console.log('üì® Overdue Reminder Message with size breakdown:');
    console.log(overdueMessage.text);

    // Send one test message (payment confirmation with size breakdown)
    console.log(
      '\nüì§ Sending payment confirmation test message with size breakdown...'
    );
    const response = await fetch(
      'http://evo-p8okkk0840kg40o0o44w4gck.173.249.28.62.sslip.io/message/sendText/lpgapp',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          apikey: 'nJjnWgllihDFnx2FRk3yyIdvi5NUUFl7',
        },
        body: JSON.stringify(paymentMessage),
      }
    );

    const result = await response.json();

    if (response.ok) {
      console.log('‚úÖ Size breakdown message sent successfully!');
      console.log(`üìã Message ID: ${result.key?.id}`);

      // Log to database
      const provider = await prisma.messageProvider.findFirst({
        where: { tenantId: sakib.tenantId, isActive: true },
      });

      if (provider) {
        await prisma.sentMessage.create({
          data: {
            tenantId: sakib.tenantId,
            providerId: provider.id,
            recipientType: 'CUSTOMER',
            recipientId: sakib.id,
            phoneNumber: sakib.phone,
            message: paymentMessage.text,
            trigger: 'PAYMENT_RECEIVED',
            messageType: 'WHATSAPP',
            status: 'SENT',
            metadata: {
              messageId: result.key?.id,
              templateTest: true,
              cylinderSizeBreakdown: true,
              sizeBreakdown: sizeBreakdown,
            },
            sentAt: new Date(),
          },
        });
        console.log('‚úÖ Test message logged to database');
      }
    } else {
      console.log('‚ùå Failed to send test message');
      console.log('Response:', result);
    }

    console.log('\nüéØ Cylinder Size Breakdown Test Summary:');
    console.log(
      '‚úÖ All templates updated to show cylinder receivables by individual sizes'
    );
    console.log(
      '‚úÖ Messaging service includes size-specific formatting functions'
    );
    console.log('‚úÖ Shows "12L: ‡ß™ ‡¶ü‡¶ø, 35L: ‡ß™ ‡¶ü‡¶ø" instead of "‡ßÆ ‡¶ü‡¶ø"');
    console.log('‚úÖ Bengali numerals used throughout size breakdown');
    console.log(
      '‚úÖ All message types (payment, return, change, overdue) support size breakdown'
    );
    console.log('‚úÖ Message sent successfully');
    console.log(
      '\nüöÄ Cylinder size breakdown messaging is ready for production!'
    );
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testCylinderSizesMessaging();
