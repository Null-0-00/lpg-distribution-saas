// Test all message templates with full Bengali including Bengali numerals
const { PrismaClient } = require('@prisma/client');
const fetch = require('node-fetch');
const prisma = new PrismaClient();

// Function to convert English numbers to Bengali
function toBengaliNumber(num) {
  const bengaliNumerals = ['рзж', 'рзз', 'рзи', 'рзй', 'рзк', 'рзл', 'рзм', 'рзн', 'рзо', 'рзп'];
  return num
    .toString()
    .replace(/\d/g, (digit) => bengaliNumerals[parseInt(digit)]);
}

async function testFullBengaliMessages() {
  try {
    console.log('ЁЯзк Testing all message templates with full Bengali...\n');

    // Find Sakib
    const sakib = await prisma.customer.findFirst({
      where: {
        name: 'Sakib',
        phone: '+8801793536151',
        isActive: true,
      },
    });

    if (!sakib) {
      console.log('тЭМ Sakib not found');
      return;
    }

    console.log(`ЁЯСд Customer: ${sakib.name}`);
    console.log(`ЁЯУ▒ Phone: ${sakib.phone}`);

    // Get tenant name
    const tenant = await prisma.tenant.findUnique({
      where: { id: sakib.tenantId },
      select: { name: true },
    });

    // Test 1: Payment Received Message
    console.log('\nЁЯФД Testing Payment Received Message...');
    const paymentAmount = 75;
    const cashReceivables = 415;
    const cylinderReceivables = 8;

    const paymentMessage = {
      number: sakib.phone,
      text: `*${tenant?.name || 'Eureka'}*
тЬЕ *ржкрзЗржорзЗржирзНржЯ ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг*

ржкрзНрж░рж┐ржпрж╝ ${sakib.name},

ржЖржкржирж╛рж░ ${toBengaliNumber(paymentAmount)} ржЯрж╛ржХрж╛рж░ ржиржЧржж ржкрзЗржорзЗржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред

ржкрзЗржорзЗржирзНржЯрзЗрж░ ржкрж░ ржЖржкржбрзЗржЯрзЗржб ржмржХрзЗржпрж╝рж╛:
ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛: ${toBengaliNumber(cashReceivables)} ржЯрж╛ржХрж╛
ЁЯЫвя╕П рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: ${toBengaliNumber(cylinderReceivables)} ржЯрж┐

ржЧрзНрж░рж╣ржгржХрж╛рж░рзА: Sakib (Admin)
ржкрзЗржорзЗржирзНржЯ рждрж╛рж░рж┐ржЦ: ${new Date().toLocaleDateString('bn-BD')}
рж╕ржоржпрж╝: ${new Date().toLocaleTimeString('bn-BD')}

ржЖржкржирж╛рж░ рж╕ржоржпрж╝ржоржд ржкрзЗржорзЗржирзНржЯрзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!

*${tenant?.name || 'Eureka'} - ржПрж▓ржкрж┐ржЬрж┐ ржбрж┐рж╕рзНржЯрзНрж░рж┐ржмрж┐ржЙржЯрж░*`,
    };

    console.log('ЁЯУи Payment Message:');
    console.log(paymentMessage.text);

    // Test 2: Cylinder Return Message
    console.log('\nЁЯФД Testing Cylinder Return Message...');
    const returnQuantity = 2;
    const cylinderSize = '12L';
    const updatedCylinderReceivables = 6;

    const cylinderReturnMessage = {
      number: sakib.phone,
      text: `*${tenant?.name || 'Eureka'}*
ЁЯЫвя╕П *рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржлрзЗрж░ржд ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг*

ржкрзНрж░рж┐ржпрж╝ ${sakib.name},

ржЖржкржирж╛рж░ ${toBengaliNumber(returnQuantity)} ржЯрж┐ ${cylinderSize} рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ рж╕ржлрж▓ржнрж╛ржмрзЗ ржлрзЗрж░ржд ржирзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред

ржлрзЗрж░рждрзЗрж░ ржкрж░ ржЖржкржбрзЗржЯрзЗржб ржмржХрзЗржпрж╝рж╛:
ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛: ${toBengaliNumber(cashReceivables)} ржЯрж╛ржХрж╛
ЁЯЫвя╕П рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: ${toBengaliNumber(updatedCylinderReceivables)} ржЯрж┐

ржЧрзНрж░рж╣ржгржХрж╛рж░рзА: Sakib (Admin)
ржлрзЗрж░ржд рждрж╛рж░рж┐ржЦ: ${new Date().toLocaleDateString('bn-BD')}
рж╕ржоржпрж╝: ${new Date().toLocaleTimeString('bn-BD')}

ржЖржкржирж╛рж░ рж╕ржоржпрж╝ржоржд рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржлрзЗрж░рждрзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!

*${tenant?.name || 'Eureka'} - ржПрж▓ржкрж┐ржЬрж┐ ржбрж┐рж╕рзНржЯрзНрж░рж┐ржмрж┐ржЙржЯрж░*`,
    };

    console.log('ЁЯУи Cylinder Return Message:');
    console.log(cylinderReturnMessage.text);

    // Test 3: Receivables Change Message (Cash increase)
    console.log('\nЁЯФД Testing Receivables Change Message...');
    const oldCash = 415;
    const newCash = 565;
    const cashChange = newCash - oldCash;

    const receivablesChangeMessage = {
      number: sakib.phone,
      text: `ЁЯФФ *ржмржХрзЗржпрж╝рж╛ ржЖржкржбрзЗржЯ*

ржкрзНрж░рж┐ржпрж╝ ${sakib.name},

ржЖржкржирж╛рж░ ржмржХрзЗржпрж╝рж╛ рждржерзНржп ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ:

ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж░рзНрждржи:
ржкрзБрж░рж╛рждржи: ${toBengaliNumber(oldCash)} ржЯрж╛ржХрж╛
ржирждрзБржи: ${toBengaliNumber(newCash)} ржЯрж╛ржХрж╛
ржкрж░рж┐ржмрж░рзНрждржи: ${toBengaliNumber(cashChange)} ржЯрж╛ржХрж╛ (ржмрзГржжрзНржзрж┐)



ржмрж░рзНрждржорж╛ржи ржорзЛржЯ ржмржХрзЗржпрж╝рж╛:
ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛: ${toBengaliNumber(newCash)} ржЯрж╛ржХрж╛
ЁЯЫвя╕П рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: ${toBengaliNumber(cylinderReceivables)} ржЯрж┐

рж╕ржоржпрж╝: ${new Date().toLocaleDateString('bn-BD')} ${new Date().toLocaleTimeString('bn-BD')}
ржХрж╛рж░ржг: ржирждрзБржи ржиржЧржж ржмржХрзЗржпрж╝рж╛ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ

*${tenant?.name || 'Eureka'}*`,
    };

    console.log('ЁЯУи Receivables Change Message:');
    console.log(receivablesChangeMessage.text);

    // Test 4: Overdue Reminder Message
    console.log('\nЁЯФД Testing Overdue Reminder Message...');
    const totalAmount = newCash + cylinderReceivables;
    const daysOverdue = 7;

    const overdueMessage = {
      number: sakib.phone,
      text: `тЪая╕П *ржмржХрзЗржпрж╝рж╛ ржоржирзЗ ржХрж░рж┐ржпрж╝рзЗ ржжрж┐ржи*

ржкрзНрж░рж┐ржпрж╝ ${sakib.name},

ржЖржкржирж╛рж░ ржорзЛржЯ ржмржХрзЗржпрж╝рж╛ ${toBengaliNumber(totalAmount)} ржЯрж╛ржХрж╛ред
ржмржХрзЗржпрж╝рж╛рж░ ржорзЗржпрж╝рж╛ржж: ${toBengaliNumber(daysOverdue)} ржжрж┐ржи

ржиржЧржж ржмржХрзЗржпрж╝рж╛: ${toBengaliNumber(newCash)} ржЯрж╛ржХрж╛
рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: ${toBengaliNumber(cylinderReceivables)} ржЯрж┐

ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржпржд рждрж╛ржбрж╝рж╛рждрж╛ржбрж╝рж┐ рж╕ржорзНржнржм ржкрж░рж┐рж╢рзЛржз ржХрж░рзБржиред
ржпрзЛржЧрж╛ржпрзЛржЧ: +рзорзорзжрззрзнрзпрзйрзлрзйрзмрззрзлрзз

*${tenant?.name || 'Eureka'}*`,
    };

    console.log('ЁЯУи Overdue Reminder Message:');
    console.log(overdueMessage.text);

    // Send one test message (payment confirmation)
    console.log('\nЁЯУд Sending payment confirmation test message...');
    const response = await fetch(
      'http://evo-p8okkk0840kg40o0o44w4gck.173.249.28.62.sslip.io/message/sendText/lpgapp',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          apikey: 'nJjnWgllihDFnx2FRk3yyIdvi5NUUFl7',
        },
        body: JSON.stringify(paymentMessage),
      }
    );

    const result = await response.json();

    if (response.ok) {
      console.log('тЬЕ Full Bengali message sent successfully!');
      console.log(`ЁЯУЛ Message ID: ${result.key?.id}`);

      // Log to database
      const provider = await prisma.messageProvider.findFirst({
        where: { tenantId: sakib.tenantId, isActive: true },
      });

      if (provider) {
        await prisma.sentMessage.create({
          data: {
            tenantId: sakib.tenantId,
            providerId: provider.id,
            recipientType: 'CUSTOMER',
            recipientId: sakib.id,
            phoneNumber: sakib.phone,
            message: paymentMessage.text,
            trigger: 'PAYMENT_RECEIVED',
            messageType: 'WHATSAPP',
            status: 'SENT',
            metadata: {
              messageId: result.key?.id,
              templateTest: true,
              fullBengaliTest: true,
              bengaliNumerals: true,
            },
            sentAt: new Date(),
          },
        });
        console.log('тЬЕ Test message logged to database');
      }
    } else {
      console.log('тЭМ Failed to send test message');
      console.log('Response:', result);
    }

    console.log('\nЁЯОп Full Bengali Message Test Summary:');
    console.log('тЬЕ All templates use "ржЯрж╛ржХрж╛" instead of рз│ symbol');
    console.log('тЬЕ "LPG ржбрж┐рж╕рзНржЯрзНрж░рж┐ржмрж┐ржЙржЯрж░" converted to "ржПрж▓ржкрж┐ржЬрж┐ ржбрж┐рж╕рзНржЯрзНрж░рж┐ржмрж┐ржЙржЯрж░"');
    console.log('тЬЕ All numbers converted to Bengali numerals (рзжрззрзирзйрзкрзлрзмрзнрзорзп)');
    console.log(
      'тЬЕ Messaging service updated to format all numbers in Bengali'
    );
    console.log('тЬЕ All four message types tested with Bengali numerals');
    console.log('тЬЕ Message sent successfully');
    console.log('\nЁЯЪА Full Bengali messaging is ready for production!');
  } catch (error) {
    console.error('тЭМ Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testFullBengaliMessages();
