const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Template replacement function
function replaceTemplateVariables(template, variables) {
  let result = template;
  for (const [key, value] of Object.entries(variables)) {
    const placeholder = `{{${key}}}`;
    result = result.replace(
      new RegExp(placeholder.replace(/[{}]/g, '\\$&'), 'g'),
      value
    );
  }
  return result;
}

async function testUpdatedTemplates() {
  try {
    console.log('=== TESTING UPDATED TEMPLATES ===\n');

    // Test data similar to the provided example
    const testData = {
      companyName: 'Eureka',
      customerName: 'Sakib',
      quantity: '‡ß®',
      size: '12L',
      cashAmount: '‡ß™‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ',
      newCylinderReceivablesBySize: '35L: ‡ß¨ ‡¶ü‡¶ø, 12L: ‡ßß‡ß® ‡¶ü‡¶ø',
      receivedBy: 'Sakib',
      date: '‡ß™/‡ßÆ/‡ß®‡ß¶‡ß®‡ß´',
      time: '‡ß¶‡ßØ:‡ß©‡ß® AM',

      // Additional variables for other templates
      cashChangeDetails: 'üí∞ ‡¶®‡¶ó‡¶¶ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø: ‡ß´‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ',
      cylinderChangeDetails: 'üõ¢ ‡¶∏‡¶ø‡¶≤‡¶ø‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡ßá‡¶∞‡¶§: ‡ß® ‡¶ü‡¶ø',
      newCashAmount: '‡ßØ‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ',
      changeReason: '‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º',
      areaName: '‡¶¢‡¶æ‡¶ï‡¶æ',
      driverName: '‡¶ï‡¶∞‡¶ø‡¶Æ ‡¶≠‡¶æ‡¶á',

      paymentAmount: '‡ß´‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ',
      paymentMethod: '‡¶®‡¶ó‡¶¶',
      cylindersReceived: '‡ß®',
      updatedCashReceivables: '‡ß™‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ',
      updatedCylinderReceivablesBySize: '35L: ‡ß¨ ‡¶ü‡¶ø, 12L: ‡ßß‡ß® ‡¶ü‡¶ø',

      cylinderReceivablesBySize: '35L: ‡ß¨ ‡¶ü‡¶ø, 12L: ‡ßß‡ß® ‡¶ü‡¶ø',
      daysPastDue: '‡ß≠',
    };

    // Get updated templates
    const templates = await prisma.messageTemplate.findMany({
      where: { isActive: true },
      include: { tenant: { select: { name: true } } },
      orderBy: { trigger: 'asc' },
    });

    console.log(`Testing ${templates.length} templates:\n`);

    for (const template of templates) {
      console.log(`üìù ${template.trigger} (${template.tenant.name})`);
      console.log(`Template: ${template.name}`);
      console.log('---');

      const renderedTemplate = replaceTemplateVariables(
        template.template,
        testData
      );
      console.log(renderedTemplate);

      // Check for unreplaced variables
      const unreplacedVars = renderedTemplate.match(/\{\{[^}]+\}\}/g);
      if (unreplacedVars) {
        console.log(`\n‚ö†Ô∏è  Unreplaced variables: ${unreplacedVars.join(', ')}`);
      } else {
        console.log(`\n‚úÖ All variables replaced successfully`);
      }

      console.log('\n' + '='.repeat(80) + '\n');
    }

    console.log('üéâ Template testing completed!');
  } catch (error) {
    console.error('‚ùå Error testing templates:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testUpdatedTemplates();
