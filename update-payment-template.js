// Update payment received template with receivables information
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function updatePaymentTemplate() {
  try {
    console.log('ЁЯФз Updating payment received template...\n');

    const newTemplate = `*{{companyName}}*
тЬЕ *ржкрзЗржорзЗржирзНржЯ ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг*

ржкрзНрж░рж┐ржпрж╝ {{customerName}},

ржЖржкржирж╛рж░ рз│{{amount}} ржЯрж╛ржХрж╛рж░ {{paymentType}} ржкрзЗржорзЗржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред

ржкрзЗржорзЗржирзНржЯрзЗрж░ ржкрж░ ржЖржкржбрзЗржЯрзЗржб ржмржХрзЗржпрж╝рж╛:
ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛: рз│{{updatedCashReceivables}}
ЁЯЫвя╕П рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: {{updatedCylinderReceivables}} ржЯрж┐
ЁЯУК ржорзЛржЯ ржмржХрзЗржпрж╝рж╛: рз│{{updatedTotalReceivables}}

ржЧрзНрж░рж╣ржгржХрж╛рж░рзА: {{receivedBy}}
ржкрзЗржорзЗржирзНржЯ рждрж╛рж░рж┐ржЦ: {{date}}
рж╕ржоржпрж╝: {{time}}

ржЖржкржирж╛рж░ рж╕ржоржпрж╝ржоржд ржкрзЗржорзЗржирзНржЯрзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!

*{{companyName}} - LPG ржбрж┐рж╕рзНржЯрзНрж░рж┐ржмрж┐ржЙржЯрж░*`;

    const newVariables = {
      customerName: 'ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржирж╛ржо',
      amount: 'ржкрзЗржорзЗржирзНржЯ ржкрж░рж┐ржорж╛ржг',
      paymentType: 'ржкрзЗржорзЗржирзНржЯ ржкрзНрж░ржХрж╛рж░',
      updatedCashReceivables: 'ржЖржкржбрзЗржЯрзЗржб ржиржЧржж ржмржХрзЗржпрж╝рж╛',
      updatedCylinderReceivables: 'ржЖржкржбрзЗржЯрзЗржб рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛',
      updatedTotalReceivables: 'ржЖржкржбрзЗржЯрзЗржб ржорзЛржЯ ржмржХрзЗржпрж╝рж╛',
      receivedBy: 'ржЧрзНрж░рж╣ржгржХрж╛рж░рзА',
      date: 'рждрж╛рж░рж┐ржЦ',
      time: 'рж╕ржоржпрж╝',
      companyName: 'ржХрзЛржорзНржкрж╛ржирж┐рж░ ржирж╛ржо',
    };

    // Update template for Sakib's tenant
    const sakibTenant = 'cmdvbgp820000ub28u1hkluf4';

    const result = await prisma.messageTemplate.updateMany({
      where: {
        tenantId: sakibTenant,
        trigger: 'PAYMENT_RECEIVED',
        name: 'Payment Received Confirmation',
      },
      data: {
        template: newTemplate,
        variables: newVariables,
        updatedAt: new Date(),
      },
    });

    console.log(
      `тЬЕ Updated ${result.count} payment template(s) for tenant ${sakibTenant}`
    );

    // Verify the update
    const updatedTemplate = await prisma.messageTemplate.findFirst({
      where: {
        tenantId: sakibTenant,
        trigger: 'PAYMENT_RECEIVED',
      },
    });

    console.log('\nЁЯУЭ Updated template:');
    console.log(updatedTemplate.template);

    console.log('\nЁЯФз New variables:');
    console.log(JSON.stringify(updatedTemplate.variables, null, 2));
  } catch (error) {
    console.error('тЭМ Error updating template:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

updatePaymentTemplate();
