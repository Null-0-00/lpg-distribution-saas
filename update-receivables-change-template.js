// Update receivables change template to handle separate cash/cylinder changes
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function updateReceivablesChangeTemplate() {
  try {
    console.log('ЁЯФз Updating receivables change template...\n');

    const newTemplate = `ЁЯФФ *ржмржХрзЗржпрж╝рж╛ ржЖржкржбрзЗржЯ*

ржкрзНрж░рж┐ржпрж╝ {{customerName}},

ржЖржкржирж╛рж░ ржмржХрзЗржпрж╝рж╛ рждржерзНржп ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ:

{{#cashChanged}}
ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж░рзНрждржи:
ржкрзБрж░рж╛рждржи: рз│{{oldCashAmount}}
ржирждрзБржи: рз│{{newCashAmount}}
ржкрж░рж┐ржмрж░рзНрждржи: рз│{{cashChange}} ({{cashChangeType}})
{{/cashChanged}}

{{#cylinderChanged}}
ЁЯЫвя╕П рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж░рзНрждржи:
ржкрзБрж░рж╛рждржи: {{oldCylinderAmount}} ржЯрж┐
ржирждрзБржи: {{newCylinderAmount}} ржЯрж┐
ржкрж░рж┐ржмрж░рзНрждржи: {{cylinderChange}} ржЯрж┐ ({{cylinderChangeType}})
{{/cylinderChanged}}

ржмрж░рзНрждржорж╛ржи ржорзЛржЯ ржмржХрзЗржпрж╝рж╛:
ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛: рз│{{newCashAmount}}
ЁЯЫвя╕П рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: {{newCylinderAmount}} ржЯрж┐

рж╕ржоржпрж╝: {{date}} {{time}}
ржХрж╛рж░ржг: {{changeReason}}

*{{companyName}}*`;

    const newVariables = {
      customerName: 'ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржирж╛ржо',
      oldCashAmount: 'ржкрзБрж░рж╛рждржи ржиржЧржж ржмржХрзЗржпрж╝рж╛',
      newCashAmount: 'ржирждрзБржи ржиржЧржж ржмржХрзЗржпрж╝рж╛',
      cashChange: 'ржиржЧржж ржкрж░рж┐ржмрж░рзНрждржи',
      cashChangeType: 'ржиржЧржж ржмрзГржжрзНржзрж┐/рж╣рзНрж░рж╛рж╕',
      oldCylinderAmount: 'ржкрзБрж░рж╛рждржи рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛',
      newCylinderAmount: 'ржирждрзБржи рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛',
      cylinderChange: 'рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржкрж░рж┐ржмрж░рзНрждржи',
      cylinderChangeType: 'рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмрзГржжрзНржзрж┐/рж╣рзНрж░рж╛рж╕',
      cashChanged: 'ржиржЧржж ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ',
      cylinderChanged: 'рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ',
      date: 'рждрж╛рж░рж┐ржЦ',
      time: 'рж╕ржоржпрж╝',
      changeReason: 'ржХрж╛рж░ржг',
      companyName: 'ржХрзЛржорзНржкрж╛ржирж┐рж░ ржирж╛ржо',
    };

    // Update template for Sakib's tenant
    const sakibTenant = 'cmdvbgp820000ub28u1hkluf4';

    const result = await prisma.messageTemplate.updateMany({
      where: {
        tenantId: sakibTenant,
        trigger: 'RECEIVABLES_CHANGE',
      },
      data: {
        template: newTemplate,
        variables: newVariables,
        updatedAt: new Date(),
      },
    });

    console.log(`тЬЕ Updated ${result.count} receivables change template(s)`);

    // Verify the update
    const updatedTemplate = await prisma.messageTemplate.findFirst({
      where: {
        tenantId: sakibTenant,
        trigger: 'RECEIVABLES_CHANGE',
      },
    });

    console.log('\nЁЯУЭ Updated template:');
    console.log(updatedTemplate.template);

    console.log('\nЁЯФз New variables:');
    console.log(JSON.stringify(updatedTemplate.variables, null, 2));
  } catch (error) {
    console.error('тЭМ Error updating template:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

updateReceivablesChangeTemplate();
