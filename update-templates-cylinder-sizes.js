// Update message templates to show cylinder receivables by size
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function updateTemplatesForCylinderSizes() {
  try {
    console.log(
      'ЁЯФз Updating message templates to show cylinder receivables by size...\n'
    );

    const sakibTenant = 'cmdvbgp820000ub28u1hkluf4';

    // 1. Update Payment Received Confirmation Template
    const paymentTemplate = `*{{companyName}}*
тЬЕ *ржкрзЗржорзЗржирзНржЯ ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг*

ржкрзНрж░рж┐ржпрж╝ {{customerName}},

ржЖржкржирж╛рж░ {{amount}} ржЯрж╛ржХрж╛рж░ {{paymentType}} ржкрзЗржорзЗржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред

ржкрзЗржорзЗржирзНржЯрзЗрж░ ржкрж░ ржЖржкржбрзЗржЯрзЗржб ржмржХрзЗржпрж╝рж╛:
ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛: {{updatedCashReceivables}} ржЯрж╛ржХрж╛
ЁЯЫвя╕П рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: {{updatedCylinderReceivablesBySize}}

ржЧрзНрж░рж╣ржгржХрж╛рж░рзА: {{receivedBy}}
ржкрзЗржорзЗржирзНржЯ рждрж╛рж░рж┐ржЦ: {{date}}
рж╕ржоржпрж╝: {{time}}

ржЖржкржирж╛рж░ рж╕ржоржпрж╝ржоржд ржкрзЗржорзЗржирзНржЯрзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!

*{{companyName}} - ржПрж▓ржкрж┐ржЬрж┐ ржбрж┐рж╕рзНржЯрзНрж░рж┐ржмрж┐ржЙржЯрж░*`;

    await prisma.messageTemplate.updateMany({
      where: {
        tenantId: sakibTenant,
        trigger: 'PAYMENT_RECEIVED',
      },
      data: {
        template: paymentTemplate,
        variables: {
          customerName: 'ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржирж╛ржо',
          amount: 'ржкрзЗржорзЗржирзНржЯ ржкрж░рж┐ржорж╛ржг',
          paymentType: 'ржкрзЗржорзЗржирзНржЯ ржкрзНрж░ржХрж╛рж░',
          updatedCashReceivables: 'ржЖржкржбрзЗржЯрзЗржб ржиржЧржж ржмржХрзЗржпрж╝рж╛',
          updatedCylinderReceivablesBySize:
            'ржЖржкржбрзЗржЯрзЗржб рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛ рж╕рж╛ржЗржЬ ржЕржирзБрж╕рж╛рж░рзЗ',
          receivedBy: 'ржЧрзНрж░рж╣ржгржХрж╛рж░рзА',
          date: 'рждрж╛рж░рж┐ржЦ',
          time: 'рж╕ржоржпрж╝',
          companyName: 'ржХрзЛржорзНржкрж╛ржирж┐рж░ ржирж╛ржо',
        },
        updatedAt: new Date(),
      },
    });
    console.log('тЬЕ Updated Payment Received template');

    // 2. Update Overdue Reminder Template
    const overdueTemplate = `тЪая╕П *ржмржХрзЗржпрж╝рж╛ ржоржирзЗ ржХрж░рж┐ржпрж╝рзЗ ржжрж┐ржи*

ржкрзНрж░рж┐ржпрж╝ {{customerName}},

ржЖржкржирж╛рж░ ржорзЛржЯ ржмржХрзЗржпрж╝рж╛ {{amount}} ржЯрж╛ржХрж╛ред
ржмржХрзЗржпрж╝рж╛рж░ ржорзЗржпрж╝рж╛ржж: {{daysOverdue}} ржжрж┐ржи

ржиржЧржж ржмржХрзЗржпрж╝рж╛: {{cashAmount}} ржЯрж╛ржХрж╛
рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: {{cylinderReceivablesBySize}}

ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржпржд рждрж╛ржбрж╝рж╛рждрж╛ржбрж╝рж┐ рж╕ржорзНржнржм ржкрж░рж┐рж╢рзЛржз ржХрж░рзБржиред
ржпрзЛржЧрж╛ржпрзЛржЧ: {{contactNumber}}

*{{companyName}}*`;

    await prisma.messageTemplate.updateMany({
      where: {
        tenantId: sakibTenant,
        trigger: 'OVERDUE_REMINDER',
      },
      data: {
        template: overdueTemplate,
        variables: {
          customerName: 'ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржирж╛ржо',
          amount: 'ржорзЛржЯ ржмржХрзЗржпрж╝рж╛',
          daysOverdue: 'ржорзЗржпрж╝рж╛ржжрзЛрждрзНрждрзАрж░рзНржг ржжрж┐ржи',
          cashAmount: 'ржиржЧржж ржмржХрзЗржпрж╝рж╛',
          cylinderReceivablesBySize: 'рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛ рж╕рж╛ржЗржЬ ржЕржирзБрж╕рж╛рж░рзЗ',
          contactNumber: 'ржпрзЛржЧрж╛ржпрзЛржЧ ржиржорзНржмрж░',
          companyName: 'ржХрзЛржорзНржкрж╛ржирж┐рж░ ржирж╛ржо',
        },
        updatedAt: new Date(),
      },
    });
    console.log('тЬЕ Updated Overdue Reminder template');

    // 3. Update Receivables Change Template
    const receivablesChangeTemplate = `ЁЯФФ *ржмржХрзЗржпрж╝рж╛ ржЖржкржбрзЗржЯ*

ржкрзНрж░рж┐ржпрж╝ {{customerName}},

ржЖржкржирж╛рж░ ржмржХрзЗржпрж╝рж╛ рждржерзНржп ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ:

{{cashChangeDetails}}

{{cylinderChangeDetails}}

ржмрж░рзНрждржорж╛ржи ржорзЛржЯ ржмржХрзЗржпрж╝рж╛:
ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛: {{newCashAmount}} ржЯрж╛ржХрж╛
ЁЯЫвя╕П рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: {{newCylinderReceivablesBySize}}

рж╕ржоржпрж╝: {{date}} {{time}}
ржХрж╛рж░ржг: {{changeReason}}

*{{companyName}}*`;

    await prisma.messageTemplate.updateMany({
      where: {
        tenantId: sakibTenant,
        trigger: 'RECEIVABLES_CHANGE',
      },
      data: {
        template: receivablesChangeTemplate,
        variables: {
          customerName: 'ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржирж╛ржо',
          cashChangeDetails: 'ржиржЧржж ржмржХрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ ржмрж┐ржмрж░ржг',
          cylinderChangeDetails: 'рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ ржмрж┐ржмрж░ржг',
          newCashAmount: 'ржирждрзБржи ржиржЧржж ржмржХрзЗржпрж╝рж╛',
          newCylinderReceivablesBySize: 'ржирждрзБржи рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛ рж╕рж╛ржЗржЬ ржЕржирзБрж╕рж╛рж░рзЗ',
          date: 'рждрж╛рж░рж┐ржЦ',
          time: 'рж╕ржоржпрж╝',
          changeReason: 'ржХрж╛рж░ржг',
          companyName: 'ржХрзЛржорзНржкрж╛ржирж┐рж░ ржирж╛ржо',
        },
        updatedAt: new Date(),
      },
    });
    console.log('тЬЕ Updated Receivables Change template');

    // 4. Update Cylinder Return Confirmation Template
    const cylinderReturnTemplate = `*{{companyName}}*
ЁЯЫвя╕П *рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржлрзЗрж░ржд ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг*

ржкрзНрж░рж┐ржпрж╝ {{customerName}},

ржЖржкржирж╛рж░ {{quantity}} ржЯрж┐ {{size}} рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ рж╕ржлрж▓ржнрж╛ржмрзЗ ржлрзЗрж░ржд ржирзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред

ржлрзЗрж░рждрзЗрж░ ржкрж░ ржЖржкржбрзЗржЯрзЗржб ржмржХрзЗржпрж╝рж╛:
ЁЯТ░ ржиржЧржж ржмржХрзЗржпрж╝рж╛: {{updatedCashReceivables}} ржЯрж╛ржХрж╛
ЁЯЫвя╕П рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛: {{updatedCylinderReceivablesBySize}}

ржЧрзНрж░рж╣ржгржХрж╛рж░рзА: {{receivedBy}}
ржлрзЗрж░ржд рждрж╛рж░рж┐ржЦ: {{date}}
рж╕ржоржпрж╝: {{time}}

ржЖржкржирж╛рж░ рж╕ржоржпрж╝ржоржд рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржлрзЗрж░рждрзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!

*{{companyName}} - ржПрж▓ржкрж┐ржЬрж┐ ржбрж┐рж╕рзНржЯрзНрж░рж┐ржмрж┐ржЙржЯрж░*`;

    await prisma.messageTemplate.updateMany({
      where: {
        tenantId: sakibTenant,
        trigger: 'CYLINDER_RETURN',
      },
      data: {
        template: cylinderReturnTemplate,
        variables: {
          customerName: 'ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржирж╛ржо',
          quantity: 'рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ рж╕ржВржЦрзНржпрж╛',
          size: 'рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ рж╕рж╛ржЗржЬ',
          updatedCashReceivables: 'ржЖржкржбрзЗржЯрзЗржб ржиржЧржж ржмржХрзЗржпрж╝рж╛',
          updatedCylinderReceivablesBySize:
            'ржЖржкржбрзЗржЯрзЗржб рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░ ржмржХрзЗржпрж╝рж╛ рж╕рж╛ржЗржЬ ржЕржирзБрж╕рж╛рж░рзЗ',
          receivedBy: 'ржЧрзНрж░рж╣ржгржХрж╛рж░рзА',
          date: 'рждрж╛рж░рж┐ржЦ',
          time: 'рж╕ржоржпрж╝',
          companyName: 'ржХрзЛржорзНржкрж╛ржирж┐рж░ ржирж╛ржо',
        },
        updatedAt: new Date(),
      },
    });
    console.log('тЬЕ Updated Cylinder Return template');

    console.log('\nЁЯОп Template Updates Summary:');
    console.log(
      'тЬЕ All templates now show cylinder receivables by individual sizes'
    );
    console.log('тЬЕ Updated variable names to reflect size-based breakdown');
    console.log('тЬЕ Templates ready for size-specific cylinder messaging');
  } catch (error) {
    console.error('тЭМ Error updating templates:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

updateTemplatesForCylinderSizes();
